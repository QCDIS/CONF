/*
 * Copyright 2017 S. Koulouzis, Wang Junchao, Huan Zhou, Yang Hu 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package nl.uva.sne.drip.api.v0.rest;

import java.io.IOException;
import nl.uva.sne.drip.commons.v1.types.ProvisionInfo;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.security.RolesAllowed;
import nl.uva.sne.drip.commons.utils.Converter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import nl.uva.sne.drip.api.service.CloudCredentialsService;
import nl.uva.sne.drip.api.service.PlannerService;
import nl.uva.sne.drip.api.service.ProvisionService;
import nl.uva.sne.drip.api.service.UserKeyService;
import nl.uva.sne.drip.api.service.UserScriptService;
import nl.uva.sne.drip.api.service.UserService;
import nl.uva.sne.drip.commons.v0.types.Execute;
import nl.uva.sne.drip.commons.v0.types.File;
import nl.uva.sne.drip.commons.v0.types.Result;
import nl.uva.sne.drip.commons.v0.types.Upload;
import nl.uva.sne.drip.commons.v1.types.CloudCredentials;
import nl.uva.sne.drip.commons.v1.types.LoginKey;
import nl.uva.sne.drip.commons.v1.types.Plan;
import nl.uva.sne.drip.commons.v1.types.Script;
import org.json.JSONException;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;

/**
 * This controller is responsible for obtaining resources from cloud providers
 * based the plan generated by the planner and uploaded by the user
 *
 * @author S. Koulouzis
 */
@RestController
@RequestMapping("/user/v0.0/switch/provision/")
@Component
public class ProvisionController0 {

    @Autowired
    private UserScriptService userScriptService;

    @Autowired
    private UserKeyService userKeysService;

    @Autowired
    private CloudCredentialsService cloudCredentialsService;

    @Autowired
    private ProvisionService provisionService;

    @Autowired
    private PlannerService planService;

    @RequestMapping(value = "/get", method = RequestMethod.GET, produces = MediaType.TEXT_XML_VALUE)
    @RolesAllowed({UserService.USER, UserService.ADMIN})
    public @ResponseBody
    Upload provision() {
        try {
            Upload up = new Upload();
            up.user = "user";
            up.pwd = "123";
            List<File> files = new ArrayList<>();
            Plan plan1 = planService.findAll().get(0);
            File f = Converter.plan1toFile(plan1);
            files.add(f);
            up.file = files;

            return up;
        } catch (JSONException ex) {
            Logger.getLogger(ProvisionController0.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    @RequestMapping(value = "/upload", method = RequestMethod.POST, consumes = MediaType.TEXT_XML_VALUE)
    @RolesAllowed({UserService.USER, UserService.ADMIN})
    public @ResponseBody
    String provision(@RequestBody Upload upload) {

        ProvisionInfo provInfo = new ProvisionInfo();
        CloudCredentials cloudCred = cloudCredentialsService.findAll().get(0);
        String cloudCredID = cloudCred.getId();
        provInfo.setCloudcloudCredentialsID(cloudCredID);
        List<nl.uva.sne.drip.commons.v0.types.File> plans = upload.file;
        nl.uva.sne.drip.commons.v1.types.Plan topLevelPlan = null;
        Set<String> loweLevelPlansIDs = new HashSet<>();

        for (nl.uva.sne.drip.commons.v0.types.File p : plans) {
            nl.uva.sne.drip.commons.v1.types.Plan plan1 = Converter.File2Plan1(p);
            if (plan1.getLevel() == 0) {
                topLevelPlan = plan1;
            } else {
                plan1 = planService.save(plan1);
                loweLevelPlansIDs.add(plan1.getId());
            }
        }
        topLevelPlan.setLoweLevelPlansIDs(loweLevelPlansIDs);
        topLevelPlan = planService.save(topLevelPlan);
        String planID = topLevelPlan.getId();
        provInfo.setPlanID(planID);
        List<LoginKey> allKeys = userKeysService.findAll();
        if (allKeys != null && !allKeys.isEmpty()) {
            String userKeyID = allKeys.get(0).getId();
            provInfo.setUserKeyID(userKeyID);
        }
        List<Script> allScripts = userScriptService.findAll();
        if (allScripts != null && !allScripts.isEmpty()) {
            String scriptID = allScripts.get(0).getId();
            provInfo.setScriptID(scriptID);
        }
        provInfo = provisionService.save(provInfo);
        return "Success: Infrastructure files are uploaded! Action number: "
                + provInfo.getId();
    }

    @RequestMapping(value = "/execute", method = RequestMethod.POST, consumes = MediaType.TEXT_XML_VALUE)
    @RolesAllowed({UserService.USER, UserService.ADMIN})
    public @ResponseBody
    Result execute(@RequestBody Execute exc) {

        try {
            ProvisionInfo req = provisionService.findOne(exc.action);
            req = provisionService.provisionResources(req);
            Map<String, Object> map = req.getKeyValue();
            String yaml = Converter.map2YmlString(map);
            yaml = yaml.replaceAll("\n", "\\\\n");

            Result res = new Result();
            List<File> files = new ArrayList<>();
            File e = new File();
            e.content = yaml;
            e.level = "0";
            e.name = "provisioned_" + exc.action;
            files.add(e);
            res.info = "INFO";
            res.status = "Success";
            res.file = files;
            return res;
        } catch (IOException | TimeoutException | JSONException | InterruptedException ex) {
            Logger.getLogger(ProvisionController0.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

}
