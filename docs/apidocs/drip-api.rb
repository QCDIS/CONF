#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Nl

module Uva

module Sne

module Drip

module Commons

module V1

module Types

  # (no documentation provided)
  class User 

    # (no documentation provided)
    attr_accessor :password
    # the id
    attr_accessor :id
    # 
    attr_accessor :username
    # 
    attr_accessor :accountNonExpired
    # 
    attr_accessor :accountNonLocked
    # 
    attr_accessor :credentialsNonExpired
    # 
    attr_accessor :enabled
    # the roles
    attr_accessor :roles

    # the json hash for this User
    def to_jaxb_json_hash
      _h = {}
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['username'] = username.to_jaxb_json_hash unless username.nil?
      _h['accountNonExpired'] = accountNonExpired.to_jaxb_json_hash unless accountNonExpired.nil?
      _h['accountNonLocked'] = accountNonLocked.to_jaxb_json_hash unless accountNonLocked.nil?
      _h['credentialsNonExpired'] = credentialsNonExpired.to_jaxb_json_hash unless credentialsNonExpired.nil?
      _h['enabled'] = enabled.to_jaxb_json_hash unless enabled.nil?
      if !roles.nil?
        _ha = Array.new
        roles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['roles'] = _ha
      end
      return _h
    end

    # the json (string form) for this User
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this User with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['username'].nil?
          _oa = _o['username']
            if(_oa.is_a? Hash)
              @username = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @username =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @username = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @username.push String.from_json(_item)
                 else
                   @username.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @username = _oa
            end
          end
        if !_o['accountNonExpired'].nil?
          _oa = _o['accountNonExpired']
            if(_oa.is_a? Hash)
              @accountNonExpired = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accountNonExpired =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accountNonExpired = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accountNonExpired.push Boolean.from_json(_item)
                 else
                   @accountNonExpired.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accountNonExpired = _oa
            end
          end
        if !_o['accountNonLocked'].nil?
          _oa = _o['accountNonLocked']
            if(_oa.is_a? Hash)
              @accountNonLocked = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accountNonLocked =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accountNonLocked = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accountNonLocked.push Boolean.from_json(_item)
                 else
                   @accountNonLocked.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accountNonLocked = _oa
            end
          end
        if !_o['credentialsNonExpired'].nil?
          _oa = _o['credentialsNonExpired']
            if(_oa.is_a? Hash)
              @credentialsNonExpired = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @credentialsNonExpired =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @credentialsNonExpired = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @credentialsNonExpired.push Boolean.from_json(_item)
                 else
                   @credentialsNonExpired.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @credentialsNonExpired = _oa
            end
          end
        if !_o['enabled'].nil?
          _oa = _o['enabled']
            if(_oa.is_a? Hash)
              @enabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enabled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enabled.push Boolean.from_json(_item)
                 else
                   @enabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enabled = _oa
            end
          end
        if !_o['roles'].nil?
          _oa = _o['roles']
            if(_oa.is_a? Hash)
              @roles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @roles =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @roles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @roles.push String.from_json(_item)
                 else
                   @roles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @roles = _oa
            end
          end
    end

    # constructs a User from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Commons

module V1

module Types

  # (no documentation provided)
  class OwnedObject 

    # the owner
    attr_accessor :owner

    # the json hash for this OwnedObject
    def to_jaxb_json_hash
      _h = {}
      _h['owner'] = owner.to_jaxb_json_hash unless owner.nil?
      return _h
    end

    # the json (string form) for this OwnedObject
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OwnedObject with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['owner'].nil?
          _oa = _o['owner']
            if(_oa.is_a? Hash)
              @owner = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @owner =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @owner = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @owner.push String.from_json(_item)
                 else
                   @owner.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @owner = _oa
            end
          end
    end

    # constructs a OwnedObject from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Commons

module V1

module Types

  # (no documentation provided)
  class DeployParameter 

    # the cloudCertificateName
    attr_accessor :cloudCertificateName
    # the IP
    attr_accessor :IP
    # the user
    attr_accessor :user
    # the role
    attr_accessor :role

    # the json hash for this DeployParameter
    def to_jaxb_json_hash
      _h = {}
      _h['cloudCertificateName'] = cloudCertificateName.to_jaxb_json_hash unless cloudCertificateName.nil?
      _h['IP'] = IP.to_jaxb_json_hash unless IP.nil?
      _h['user'] = user.to_jaxb_json_hash unless user.nil?
      _h['role'] = role.to_jaxb_json_hash unless role.nil?
      return _h
    end

    # the json (string form) for this DeployParameter
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DeployParameter with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['cloudCertificateName'].nil?
          _oa = _o['cloudCertificateName']
            if(_oa.is_a? Hash)
              @cloudCertificateName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cloudCertificateName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cloudCertificateName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cloudCertificateName.push String.from_json(_item)
                 else
                   @cloudCertificateName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cloudCertificateName = _oa
            end
          end
        if !_o['IP'].nil?
          _oa = _o['IP']
            if(_oa.is_a? Hash)
              @IP = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @IP =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @IP = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @IP.push String.from_json(_item)
                 else
                   @IP.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @IP = _oa
            end
          end
        if !_o['user'].nil?
          _oa = _o['user']
            if(_oa.is_a? Hash)
              @user = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @user =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @user = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @user.push String.from_json(_item)
                 else
                   @user.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @user = _oa
            end
          end
        if !_o['role'].nil?
          _oa = _o['role']
            if(_oa.is_a? Hash)
              @role = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @role =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @role = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @role.push String.from_json(_item)
                 else
                   @role.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @role = _oa
            end
          end
    end

    # constructs a DeployParameter from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Commons

module V1

module Types

  # (no documentation provided)
  class ClusterCredentials < Nl::Uva::Sne::Drip::Commons::V1::Types::OwnedObject 

    # (no documentation provided)
    attr_accessor :id
    # the key
    attr_accessor :key

    # the json hash for this ClusterCredentials
    def to_jaxb_json_hash
      _h = super
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['key'] = key.to_jaxb_json_hash unless key.nil?
      return _h
    end

    #initializes this ClusterCredentials with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['key'].nil?
          _oa = _o['key']
            if(_oa.is_a? Hash)
              @key = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @key =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @key = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @key.push String.from_json(_item)
                 else
                   @key.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @key = _oa
            end
          end
    end

    # constructs a ClusterCredentials from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Commons

module V1

module Types

  # (no documentation provided)
  class Type

    # 
    PRIVATE = "PRIVATE"

    # 
    PUBLIC = "PUBLIC"
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Commons

module V1

module Types

  # (no documentation provided)
  class CloudCredentials < Nl::Uva::Sne::Drip::Commons::V1::Types::OwnedObject 

    # (no documentation provided)
    attr_accessor :id
    # the key
    attr_accessor :key
    # the keyIdAlias
    attr_accessor :keyIdAlias
    # the loginKeys
    attr_accessor :loginKeys
    # the cloudProviderName
    attr_accessor :cloudProviderName
    # the keypass
    attr_accessor :keypass

    # the json hash for this CloudCredentials
    def to_jaxb_json_hash
      _h = super
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['key'] = key.to_jaxb_json_hash unless key.nil?
      _h['keyIdAlias'] = keyIdAlias.to_jaxb_json_hash unless keyIdAlias.nil?
      if !loginKeys.nil?
        _ha = Array.new
        loginKeys.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['loginKeys'] = _ha
      end
      _h['cloudProviderName'] = cloudProviderName.to_jaxb_json_hash unless cloudProviderName.nil?
      _h['keypass'] = keypass.to_jaxb_json_hash unless keypass.nil?
      return _h
    end

    #initializes this CloudCredentials with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['key'].nil?
          _oa = _o['key']
            if(_oa.is_a? Hash)
              @key = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @key =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @key = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @key.push String.from_json(_item)
                 else
                   @key.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @key = _oa
            end
          end
        if !_o['keyIdAlias'].nil?
          _oa = _o['keyIdAlias']
            if(_oa.is_a? Hash)
              @keyIdAlias = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keyIdAlias =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keyIdAlias = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keyIdAlias.push String.from_json(_item)
                 else
                   @keyIdAlias.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keyIdAlias = _oa
            end
          end
        if !_o['loginKeys'].nil?
          _oa = _o['loginKeys']
            if(_oa.is_a? Hash)
              @loginKeys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loginKeys =  Nl::Uva::Sne::Drip::Commons::V1::Types::LoginKey.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loginKeys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loginKeys.push Nl::Uva::Sne::Drip::Commons::V1::Types::LoginKey.from_json(_item)
                 else
                   @loginKeys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loginKeys = _oa
            end
          end
        if !_o['cloudProviderName'].nil?
          _oa = _o['cloudProviderName']
            if(_oa.is_a? Hash)
              @cloudProviderName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cloudProviderName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cloudProviderName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cloudProviderName.push String.from_json(_item)
                 else
                   @cloudProviderName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cloudProviderName = _oa
            end
          end
        if !_o['keypass'].nil?
          _oa = _o['keypass']
            if(_oa.is_a? Hash)
              @keypass = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keypass =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keypass = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keypass.push String.from_json(_item)
                 else
                   @keypass.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keypass = _oa
            end
          end
    end

    # constructs a CloudCredentials from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Commons

module V1

module Types

  # (no documentation provided)
  class KeyValueHolder < Nl::Uva::Sne::Drip::Commons::V1::Types::OwnedObject 

    # the keyValue
    attr_accessor :keyValue
    # the id
    attr_accessor :id

    # the json hash for this KeyValueHolder
    def to_jaxb_json_hash
      _h = super
      _h['keyValue'] = keyValue.to_jaxb_json_hash unless keyValue.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    #initializes this KeyValueHolder with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['keyValue'].nil?
          _oa = _o['keyValue']
            if(_oa.is_a? Hash)
              @keyValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keyValue =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keyValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keyValue.push Hash.from_json(_item)
                 else
                   @keyValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keyValue = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
    end

    # constructs a KeyValueHolder from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Commons

module V1

module Types

  # (no documentation provided)
  class Script < Nl::Uva::Sne::Drip::Commons::V1::Types::OwnedObject 

    # the id
    attr_accessor :id
    # the name
    attr_accessor :name
    # the contents
    attr_accessor :contents

    # the json hash for this Script
    def to_jaxb_json_hash
      _h = super
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['contents'] = contents.to_jaxb_json_hash unless contents.nil?
      return _h
    end

    #initializes this Script with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['contents'].nil?
          _oa = _o['contents']
            if(_oa.is_a? Hash)
              @contents = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contents =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contents = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contents.push String.from_json(_item)
                 else
                   @contents.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contents = _oa
            end
          end
    end

    # constructs a Script from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Commons

module V1

module Types

  # (no documentation provided)
  class LoginKey < Nl::Uva::Sne::Drip::Commons::V1::Types::OwnedObject 

    # 
    attr_accessor :name
    # the id
    attr_accessor :id
    # the type
    attr_accessor :type
    # the attributes
    attr_accessor :attributes
    # the key
    attr_accessor :key

    # the json hash for this LoginKey
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['attributes'] = attributes.to_jaxb_json_hash unless attributes.nil?
      _h['key'] = key.to_jaxb_json_hash unless key.nil?
      return _h
    end

    #initializes this LoginKey with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['attributes'].nil?
          _oa = _o['attributes']
            if(_oa.is_a? Hash)
              @attributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributes.push Hash.from_json(_item)
                 else
                   @attributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributes = _oa
            end
          end
        if !_o['key'].nil?
          _oa = _o['key']
            if(_oa.is_a? Hash)
              @key = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @key =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @key = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @key.push String.from_json(_item)
                 else
                   @key.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @key = _oa
            end
          end
    end

    # constructs a LoginKey from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Commons

module V1

module Types

  # (no documentation provided)
  class ToscaRepresentation < Nl::Uva::Sne::Drip::Commons::V1::Types::KeyValueHolder 

    # the name
    attr_accessor :name

    # the json hash for this ToscaRepresentation
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    #initializes this ToscaRepresentation with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
    end

    # constructs a ToscaRepresentation from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Commons

module V1

module Types

  # (no documentation provided)
  class ProvisionInfo < Nl::Uva::Sne::Drip::Commons::V1::Types::KeyValueHolder 

    # the cloudCredentialsID
    attr_accessor :cloudCredentialsID
    # the planID
    attr_accessor :planID
    # the scriptID
    attr_accessor :scriptID
    # the userKeyID
    attr_accessor :userKeyID
    # (no documentation provided)
    attr_accessor :deployParameters

    # the json hash for this ProvisionInfo
    def to_jaxb_json_hash
      _h = super
      _h['cloudCredentialsID'] = cloudCredentialsID.to_jaxb_json_hash unless cloudCredentialsID.nil?
      _h['planID'] = planID.to_jaxb_json_hash unless planID.nil?
      _h['scriptID'] = scriptID.to_jaxb_json_hash unless scriptID.nil?
      _h['userKeyID'] = userKeyID.to_jaxb_json_hash unless userKeyID.nil?
      if !deployParameters.nil?
        _ha = Array.new
        deployParameters.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['deployParameters'] = _ha
      end
      return _h
    end

    #initializes this ProvisionInfo with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['cloudCredentialsID'].nil?
          _oa = _o['cloudCredentialsID']
            if(_oa.is_a? Hash)
              @cloudCredentialsID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cloudCredentialsID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cloudCredentialsID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cloudCredentialsID.push String.from_json(_item)
                 else
                   @cloudCredentialsID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cloudCredentialsID = _oa
            end
          end
        if !_o['planID'].nil?
          _oa = _o['planID']
            if(_oa.is_a? Hash)
              @planID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @planID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @planID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @planID.push String.from_json(_item)
                 else
                   @planID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @planID = _oa
            end
          end
        if !_o['scriptID'].nil?
          _oa = _o['scriptID']
            if(_oa.is_a? Hash)
              @scriptID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @scriptID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @scriptID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @scriptID.push String.from_json(_item)
                 else
                   @scriptID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @scriptID = _oa
            end
          end
        if !_o['userKeyID'].nil?
          _oa = _o['userKeyID']
            if(_oa.is_a? Hash)
              @userKeyID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userKeyID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userKeyID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userKeyID.push String.from_json(_item)
                 else
                   @userKeyID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userKeyID = _oa
            end
          end
        if !_o['deployParameters'].nil?
          _oa = _o['deployParameters']
            if(_oa.is_a? Hash)
              @deployParameters = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @deployParameters =  Nl::Uva::Sne::Drip::Commons::V1::Types::DeployParameter.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @deployParameters = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @deployParameters.push Nl::Uva::Sne::Drip::Commons::V1::Types::DeployParameter.from_json(_item)
                 else
                   @deployParameters.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @deployParameters = _oa
            end
          end
    end

    # constructs a ProvisionInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Commons

module V1

module Types

  # (no documentation provided)
  class Plan < Nl::Uva::Sne::Drip::Commons::V1::Types::KeyValueHolder 

    # the name
    attr_accessor :name
    # the toscaID
    attr_accessor :toscaID
    # the level
    attr_accessor :level
    # the loweLevelPlansIDs
    attr_accessor :loweLevelPlanIDs

    # the json hash for this Plan
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['toscaID'] = toscaID.to_jaxb_json_hash unless toscaID.nil?
      _h['level'] = level.to_jaxb_json_hash unless level.nil?
      if !loweLevelPlanIDs.nil?
        _ha = Array.new
        loweLevelPlanIDs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['loweLevelPlanIDs'] = _ha
      end
      return _h
    end

    #initializes this Plan with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['toscaID'].nil?
          _oa = _o['toscaID']
            if(_oa.is_a? Hash)
              @toscaID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toscaID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toscaID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toscaID.push String.from_json(_item)
                 else
                   @toscaID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toscaID = _oa
            end
          end
        if !_o['level'].nil?
          _oa = _o['level']
            if(_oa.is_a? Hash)
              @level = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @level =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @level = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @level.push Fixnum.from_json(_item)
                 else
                   @level.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @level = _oa
            end
          end
        if !_o['loweLevelPlanIDs'].nil?
          _oa = _o['loweLevelPlanIDs']
            if(_oa.is_a? Hash)
              @loweLevelPlanIDs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loweLevelPlanIDs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loweLevelPlanIDs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loweLevelPlanIDs.push String.from_json(_item)
                 else
                   @loweLevelPlanIDs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loweLevelPlanIDs = _oa
            end
          end
    end

    # constructs a Plan from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end
