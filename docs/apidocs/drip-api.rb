#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

module Ansible

  # (no documentation provided)
  class AnsibleOutput 

    # (no documentation provided)
    attr_accessor :host
    # (no documentation provided)
    attr_accessor :result

    # the json hash for this AnsibleOutput
    def to_jaxb_json_hash
      _h = {}
      _h['host'] = host.to_jaxb_json_hash unless host.nil?
      _h['result'] = result.to_jaxb_json_hash unless result.nil?
      return _h
    end

    # the json (string form) for this AnsibleOutput
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AnsibleOutput with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['host'].nil?
          _oa = _o['host']
            if(_oa.is_a? Hash)
              @host = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @host =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @host = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @host.push String.from_json(_item)
                 else
                   @host.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @host = _oa
            end
          end
        if !_o['result'].nil?
          _oa = _o['result']
            if(_oa.is_a? Hash)
              @result = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @result =  Nl::Uva::Sne::Drip::Data::V1::External::Ansible::AnsibleResult.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @result = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @result.push Nl::Uva::Sne::Drip::Data::V1::External::Ansible::AnsibleResult.from_json(_item)
                 else
                   @result.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @result = _oa
            end
          end
    end

    # constructs a AnsibleOutput from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class OwnedObject 

    # the owner
    attr_accessor :owner
    # the id
    attr_accessor :id

    # the json hash for this OwnedObject
    def to_jaxb_json_hash
      _h = {}
      _h['owner'] = owner.to_jaxb_json_hash unless owner.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    # the json (string form) for this OwnedObject
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OwnedObject with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['owner'].nil?
          _oa = _o['owner']
            if(_oa.is_a? Hash)
              @owner = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @owner =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @owner = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @owner.push String.from_json(_item)
                 else
                   @owner.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @owner = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
    end

    # constructs a OwnedObject from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class DeployParameter 

    # the cloudCertificateName
    attr_accessor :cloudCertificateName
    # the IP
    attr_accessor :IP
    # the user
    attr_accessor :user
    # the role
    attr_accessor :role

    # the json hash for this DeployParameter
    def to_jaxb_json_hash
      _h = {}
      _h['cloudCertificateName'] = cloudCertificateName.to_jaxb_json_hash unless cloudCertificateName.nil?
      _h['IP'] = IP.to_jaxb_json_hash unless IP.nil?
      _h['user'] = user.to_jaxb_json_hash unless user.nil?
      _h['role'] = role.to_jaxb_json_hash unless role.nil?
      return _h
    end

    # the json (string form) for this DeployParameter
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DeployParameter with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['cloudCertificateName'].nil?
          _oa = _o['cloudCertificateName']
            if(_oa.is_a? Hash)
              @cloudCertificateName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cloudCertificateName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cloudCertificateName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cloudCertificateName.push String.from_json(_item)
                 else
                   @cloudCertificateName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cloudCertificateName = _oa
            end
          end
        if !_o['IP'].nil?
          _oa = _o['IP']
            if(_oa.is_a? Hash)
              @IP = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @IP =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @IP = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @IP.push String.from_json(_item)
                 else
                   @IP.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @IP = _oa
            end
          end
        if !_o['user'].nil?
          _oa = _o['user']
            if(_oa.is_a? Hash)
              @user = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @user =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @user = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @user.push String.from_json(_item)
                 else
                   @user.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @user = _oa
            end
          end
        if !_o['role'].nil?
          _oa = _o['role']
            if(_oa.is_a? Hash)
              @role = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @role =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @role = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @role.push String.from_json(_item)
                 else
                   @role.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @role = _oa
            end
          end
    end

    # constructs a DeployParameter from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

module Ansible

  # (no documentation provided)
  class Invocation 

    # (no documentation provided)
    attr_accessor :moduleName

    # the json hash for this Invocation
    def to_jaxb_json_hash
      _h = {}
      _h['module_name'] = moduleName.to_jaxb_json_hash unless moduleName.nil?
      return _h
    end

    # the json (string form) for this Invocation
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Invocation with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['module_name'].nil?
          _oa = _o['module_name']
            if(_oa.is_a? Hash)
              @moduleName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @moduleName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @moduleName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @moduleName.push String.from_json(_item)
                 else
                   @moduleName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @moduleName = _oa
            end
          end
    end

    # constructs a Invocation from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

module Ansible

  # (no documentation provided)
  class Result_ 

    # (no documentation provided)
    attr_accessor :_ansible_parsed
    # (no documentation provided)
    attr_accessor :changed
    # (no documentation provided)
    attr_accessor :cache_updated
    # (no documentation provided)
    attr_accessor :_ansible_item_result
    # (no documentation provided)
    attr_accessor :item
    # (no documentation provided)
    attr_accessor :invocation
    # (no documentation provided)
    attr_accessor :cacheUpdateTime
    # (no documentation provided)
    attr_accessor :ansibleNoLog
    # (no documentation provided)
    attr_accessor :ansibleParsed
    # (no documentation provided)
    attr_accessor :ansibleItemResult
    # (no documentation provided)
    attr_accessor :cacheUpdated

    # the json hash for this Result_
    def to_jaxb_json_hash
      _h = {}
      _h['_ansible_parsed'] = _ansible_parsed.to_jaxb_json_hash unless _ansible_parsed.nil?
      _h['changed'] = changed.to_jaxb_json_hash unless changed.nil?
      _h['cache_updated'] = cache_updated.to_jaxb_json_hash unless cache_updated.nil?
      _h['_ansible_item_result'] = _ansible_item_result.to_jaxb_json_hash unless _ansible_item_result.nil?
      if !item.nil?
        _ha = Array.new
        item.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['item'] = _ha
      end
      _h['invocation'] = invocation.to_jaxb_json_hash unless invocation.nil?
      _h['cache_update_time'] = cacheUpdateTime.to_jaxb_json_hash unless cacheUpdateTime.nil?
      _h['_ansible_no_log'] = ansibleNoLog.to_jaxb_json_hash unless ansibleNoLog.nil?
      _h['_ansible_parsed'] = ansibleParsed.to_jaxb_json_hash unless ansibleParsed.nil?
      _h['_ansible_item_result'] = ansibleItemResult.to_jaxb_json_hash unless ansibleItemResult.nil?
      _h['cache_updated'] = cacheUpdated.to_jaxb_json_hash unless cacheUpdated.nil?
      return _h
    end

    # the json (string form) for this Result_
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Result_ with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['_ansible_parsed'].nil?
          _oa = _o['_ansible_parsed']
            if(_oa.is_a? Hash)
              @_ansible_parsed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @_ansible_parsed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @_ansible_parsed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @_ansible_parsed.push Boolean.from_json(_item)
                 else
                   @_ansible_parsed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @_ansible_parsed = _oa
            end
          end
        if !_o['changed'].nil?
          _oa = _o['changed']
            if(_oa.is_a? Hash)
              @changed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @changed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @changed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @changed.push Boolean.from_json(_item)
                 else
                   @changed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @changed = _oa
            end
          end
        if !_o['cache_updated'].nil?
          _oa = _o['cache_updated']
            if(_oa.is_a? Hash)
              @cache_updated = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cache_updated =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cache_updated = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cache_updated.push Boolean.from_json(_item)
                 else
                   @cache_updated.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cache_updated = _oa
            end
          end
        if !_o['_ansible_item_result'].nil?
          _oa = _o['_ansible_item_result']
            if(_oa.is_a? Hash)
              @_ansible_item_result = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @_ansible_item_result =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @_ansible_item_result = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @_ansible_item_result.push Boolean.from_json(_item)
                 else
                   @_ansible_item_result.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @_ansible_item_result = _oa
            end
          end
        if !_o['item'].nil?
          _oa = _o['item']
            if(_oa.is_a? Hash)
              @item = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @item =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @item = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @item.push String.from_json(_item)
                 else
                   @item.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @item = _oa
            end
          end
        if !_o['invocation'].nil?
          _oa = _o['invocation']
            if(_oa.is_a? Hash)
              @invocation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @invocation =  Nl::Uva::Sne::Drip::Data::V1::External::Ansible::Invocation.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @invocation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @invocation.push Nl::Uva::Sne::Drip::Data::V1::External::Ansible::Invocation.from_json(_item)
                 else
                   @invocation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @invocation = _oa
            end
          end
        if !_o['cache_update_time'].nil?
          _oa = _o['cache_update_time']
            if(_oa.is_a? Hash)
              @cacheUpdateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cacheUpdateTime =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cacheUpdateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cacheUpdateTime.push Fixnum.from_json(_item)
                 else
                   @cacheUpdateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cacheUpdateTime = _oa
            end
          end
        if !_o['_ansible_no_log'].nil?
          _oa = _o['_ansible_no_log']
            if(_oa.is_a? Hash)
              @ansibleNoLog = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ansibleNoLog =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ansibleNoLog = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ansibleNoLog.push Boolean.from_json(_item)
                 else
                   @ansibleNoLog.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ansibleNoLog = _oa
            end
          end
        if !_o['_ansible_parsed'].nil?
          _oa = _o['_ansible_parsed']
            if(_oa.is_a? Hash)
              @ansibleParsed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ansibleParsed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ansibleParsed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ansibleParsed.push Boolean.from_json(_item)
                 else
                   @ansibleParsed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ansibleParsed = _oa
            end
          end
        if !_o['_ansible_item_result'].nil?
          _oa = _o['_ansible_item_result']
            if(_oa.is_a? Hash)
              @ansibleItemResult = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ansibleItemResult =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ansibleItemResult = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ansibleItemResult.push Boolean.from_json(_item)
                 else
                   @ansibleItemResult.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ansibleItemResult = _oa
            end
          end
        if !_o['cache_updated'].nil?
          _oa = _o['cache_updated']
            if(_oa.is_a? Hash)
              @cacheUpdated = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cacheUpdated =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cacheUpdated = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cacheUpdated.push Boolean.from_json(_item)
                 else
                   @cacheUpdated.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cacheUpdated = _oa
            end
          end
    end

    # constructs a Result_ from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

module Ansible

  # (no documentation provided)
  class AnsibleResult 

    # (no documentation provided)
    attr_accessor :ansibleParsed
    # (no documentation provided)
    attr_accessor :changed
    # (no documentation provided)
    attr_accessor :results
    # (no documentation provided)
    attr_accessor :ansible_verbose_always
    # (no documentation provided)
    attr_accessor :end
    # (no documentation provided)
    attr_accessor :ansibleNoLog
    # (no documentation provided)
    attr_accessor :stdout
    # (no documentation provided)
    attr_accessor :msg
    # (no documentation provided)
    attr_accessor :cmd
    # (no documentation provided)
    attr_accessor :rc
    # (no documentation provided)
    attr_accessor :start
    # (no documentation provided)
    attr_accessor :stderr
    # (no documentation provided)
    attr_accessor :delta
    # (no documentation provided)
    attr_accessor :invocation
    # (no documentation provided)
    attr_accessor :stdoutLines
    # (no documentation provided)
    attr_accessor :warnings
    # (no documentation provided)
    attr_accessor :_ansible_parsed
    # (no documentation provided)
    attr_accessor :_ansible_no_log

    # the json hash for this AnsibleResult
    def to_jaxb_json_hash
      _h = {}
      _h['_ansible_parsed'] = ansibleParsed.to_jaxb_json_hash unless ansibleParsed.nil?
      _h['changed'] = changed.to_jaxb_json_hash unless changed.nil?
      if !results.nil?
        _ha = Array.new
        results.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['results'] = _ha
      end
      _h['_ansible_verbose_always'] = ansible_verbose_always.to_jaxb_json_hash unless ansible_verbose_always.nil?
      _h['end'] = end.to_jaxb_json_hash unless end.nil?
      _h['_ansible_no_log'] = ansibleNoLog.to_jaxb_json_hash unless ansibleNoLog.nil?
      _h['stdout'] = stdout.to_jaxb_json_hash unless stdout.nil?
      _h['msg'] = msg.to_jaxb_json_hash unless msg.nil?
      if !cmd.nil?
        _ha = Array.new
        cmd.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['cmd'] = _ha
      end
      _h['rc'] = rc.to_jaxb_json_hash unless rc.nil?
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      _h['stderr'] = stderr.to_jaxb_json_hash unless stderr.nil?
      _h['delta'] = delta.to_jaxb_json_hash unless delta.nil?
      _h['invocation'] = invocation.to_jaxb_json_hash unless invocation.nil?
      if !stdoutLines.nil?
        _ha = Array.new
        stdoutLines.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['stdout_lines'] = _ha
      end
      if !warnings.nil?
        _ha = Array.new
        warnings.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['warnings'] = _ha
      end
      _h['_ansible_parsed'] = _ansible_parsed.to_jaxb_json_hash unless _ansible_parsed.nil?
      _h['_ansible_no_log'] = _ansible_no_log.to_jaxb_json_hash unless _ansible_no_log.nil?
      return _h
    end

    # the json (string form) for this AnsibleResult
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AnsibleResult with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['_ansible_parsed'].nil?
          _oa = _o['_ansible_parsed']
            if(_oa.is_a? Hash)
              @ansibleParsed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ansibleParsed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ansibleParsed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ansibleParsed.push Boolean.from_json(_item)
                 else
                   @ansibleParsed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ansibleParsed = _oa
            end
          end
        if !_o['changed'].nil?
          _oa = _o['changed']
            if(_oa.is_a? Hash)
              @changed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @changed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @changed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @changed.push Boolean.from_json(_item)
                 else
                   @changed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @changed = _oa
            end
          end
        if !_o['results'].nil?
          _oa = _o['results']
            if(_oa.is_a? Hash)
              @results = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @results =  Nl::Uva::Sne::Drip::Data::V1::External::Ansible::Result_.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @results = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @results.push Nl::Uva::Sne::Drip::Data::V1::External::Ansible::Result_.from_json(_item)
                 else
                   @results.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @results = _oa
            end
          end
        if !_o['_ansible_verbose_always'].nil?
          _oa = _o['_ansible_verbose_always']
            if(_oa.is_a? Hash)
              @ansible_verbose_always = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ansible_verbose_always =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ansible_verbose_always = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ansible_verbose_always.push Boolean.from_json(_item)
                 else
                   @ansible_verbose_always.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ansible_verbose_always = _oa
            end
          end
        if !_o['end'].nil?
          _oa = _o['end']
            if(_oa.is_a? Hash)
              @end = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @end =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @end = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @end.push Time.from_json(_item)
                 else
                   @end.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @end = _oa
            end
          end
        if !_o['_ansible_no_log'].nil?
          _oa = _o['_ansible_no_log']
            if(_oa.is_a? Hash)
              @ansibleNoLog = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ansibleNoLog =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ansibleNoLog = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ansibleNoLog.push Boolean.from_json(_item)
                 else
                   @ansibleNoLog.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ansibleNoLog = _oa
            end
          end
        if !_o['stdout'].nil?
          _oa = _o['stdout']
            if(_oa.is_a? Hash)
              @stdout = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @stdout =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @stdout = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @stdout.push String.from_json(_item)
                 else
                   @stdout.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @stdout = _oa
            end
          end
        if !_o['msg'].nil?
          _oa = _o['msg']
            if(_oa.is_a? Hash)
              @msg = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @msg =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @msg = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @msg.push String.from_json(_item)
                 else
                   @msg.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @msg = _oa
            end
          end
        if !_o['cmd'].nil?
          _oa = _o['cmd']
            if(_oa.is_a? Hash)
              @cmd = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cmd =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cmd = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cmd.push String.from_json(_item)
                 else
                   @cmd.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cmd = _oa
            end
          end
        if !_o['rc'].nil?
          _oa = _o['rc']
            if(_oa.is_a? Hash)
              @rc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rc =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rc.push Fixnum.from_json(_item)
                 else
                   @rc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rc = _oa
            end
          end
        if !_o['start'].nil?
          _oa = _o['start']
            if(_oa.is_a? Hash)
              @start = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @start =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @start = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @start.push Time.from_json(_item)
                 else
                   @start.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @start = _oa
            end
          end
        if !_o['stderr'].nil?
          _oa = _o['stderr']
            if(_oa.is_a? Hash)
              @stderr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @stderr =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @stderr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @stderr.push String.from_json(_item)
                 else
                   @stderr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @stderr = _oa
            end
          end
        if !_o['delta'].nil?
          _oa = _o['delta']
            if(_oa.is_a? Hash)
              @delta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @delta =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @delta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @delta.push Time.from_json(_item)
                 else
                   @delta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @delta = _oa
            end
          end
        if !_o['invocation'].nil?
          _oa = _o['invocation']
            if(_oa.is_a? Hash)
              @invocation = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @invocation =  Nl::Uva::Sne::Drip::Data::V1::External::Ansible::Invocation.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @invocation = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @invocation.push Nl::Uva::Sne::Drip::Data::V1::External::Ansible::Invocation.from_json(_item)
                 else
                   @invocation.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @invocation = _oa
            end
          end
        if !_o['stdout_lines'].nil?
          _oa = _o['stdout_lines']
            if(_oa.is_a? Hash)
              @stdoutLines = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @stdoutLines =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @stdoutLines = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @stdoutLines.push String.from_json(_item)
                 else
                   @stdoutLines.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @stdoutLines = _oa
            end
          end
        if !_o['warnings'].nil?
          _oa = _o['warnings']
            if(_oa.is_a? Hash)
              @warnings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @warnings =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @warnings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @warnings.push String.from_json(_item)
                 else
                   @warnings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @warnings = _oa
            end
          end
        if !_o['_ansible_parsed'].nil?
          _oa = _o['_ansible_parsed']
            if(_oa.is_a? Hash)
              @_ansible_parsed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @_ansible_parsed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @_ansible_parsed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @_ansible_parsed.push Boolean.from_json(_item)
                 else
                   @_ansible_parsed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @_ansible_parsed = _oa
            end
          end
        if !_o['_ansible_no_log'].nil?
          _oa = _o['_ansible_no_log']
            if(_oa.is_a? Hash)
              @_ansible_no_log = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @_ansible_no_log =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @_ansible_no_log = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @_ansible_no_log.push Boolean.from_json(_item)
                 else
                   @_ansible_no_log.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @_ansible_no_log = _oa
            end
          end
    end

    # constructs a AnsibleResult from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class Key 

    # 
    attr_accessor :name
    # the type
    attr_accessor :type
    # the attributes
    attr_accessor :attributes
    # the key
    attr_accessor :key

    # the json hash for this Key
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['attributes'] = attributes.to_jaxb_json_hash unless attributes.nil?
      _h['key'] = key.to_jaxb_json_hash unless key.nil?
      return _h
    end

    # the json (string form) for this Key
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Key with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['attributes'].nil?
          _oa = _o['attributes']
            if(_oa.is_a? Hash)
              @attributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributes.push Hash.from_json(_item)
                 else
                   @attributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributes = _oa
            end
          end
        if !_o['key'].nil?
          _oa = _o['key']
            if(_oa.is_a? Hash)
              @key = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @key =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @key = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @key.push String.from_json(_item)
                 else
                   @key.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @key = _oa
            end
          end
    end

    # constructs a Key from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class User 

    # (no documentation provided)
    attr_accessor :password
    # the id
    attr_accessor :id
    # 
    attr_accessor :username
    # 
    attr_accessor :accountNonExpired
    # 
    attr_accessor :accountNonLocked
    # 
    attr_accessor :credentialsNonExpired
    # 
    attr_accessor :enabled
    # the roles
    attr_accessor :roles

    # the json hash for this User
    def to_jaxb_json_hash
      _h = {}
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['username'] = username.to_jaxb_json_hash unless username.nil?
      _h['accountNonExpired'] = accountNonExpired.to_jaxb_json_hash unless accountNonExpired.nil?
      _h['accountNonLocked'] = accountNonLocked.to_jaxb_json_hash unless accountNonLocked.nil?
      _h['credentialsNonExpired'] = credentialsNonExpired.to_jaxb_json_hash unless credentialsNonExpired.nil?
      _h['enabled'] = enabled.to_jaxb_json_hash unless enabled.nil?
      if !roles.nil?
        _ha = Array.new
        roles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['roles'] = _ha
      end
      return _h
    end

    # the json (string form) for this User
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this User with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['username'].nil?
          _oa = _o['username']
            if(_oa.is_a? Hash)
              @username = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @username =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @username = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @username.push String.from_json(_item)
                 else
                   @username.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @username = _oa
            end
          end
        if !_o['accountNonExpired'].nil?
          _oa = _o['accountNonExpired']
            if(_oa.is_a? Hash)
              @accountNonExpired = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accountNonExpired =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accountNonExpired = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accountNonExpired.push Boolean.from_json(_item)
                 else
                   @accountNonExpired.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accountNonExpired = _oa
            end
          end
        if !_o['accountNonLocked'].nil?
          _oa = _o['accountNonLocked']
            if(_oa.is_a? Hash)
              @accountNonLocked = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accountNonLocked =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accountNonLocked = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accountNonLocked.push Boolean.from_json(_item)
                 else
                   @accountNonLocked.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accountNonLocked = _oa
            end
          end
        if !_o['credentialsNonExpired'].nil?
          _oa = _o['credentialsNonExpired']
            if(_oa.is_a? Hash)
              @credentialsNonExpired = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @credentialsNonExpired =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @credentialsNonExpired = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @credentialsNonExpired.push Boolean.from_json(_item)
                 else
                   @credentialsNonExpired.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @credentialsNonExpired = _oa
            end
          end
        if !_o['enabled'].nil?
          _oa = _o['enabled']
            if(_oa.is_a? Hash)
              @enabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enabled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enabled.push Boolean.from_json(_item)
                 else
                   @enabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enabled = _oa
            end
          end
        if !_o['roles'].nil?
          _oa = _o['roles']
            if(_oa.is_a? Hash)
              @roles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @roles =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @roles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @roles.push String.from_json(_item)
                 else
                   @roles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @roles = _oa
            end
          end
    end

    # constructs a User from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class CloudCredentials < Nl::Uva::Sne::Drip::Data::V1::External::OwnedObject 

    # the secret key
    attr_accessor :secretKey
    # the cloudProviderName
    attr_accessor :cloudProviderName
    # the accessKeyId
    attr_accessor :accessKeyId
    # the keyPairIDs
    attr_accessor :keyPairIDs

    # the json hash for this CloudCredentials
    def to_jaxb_json_hash
      _h = super
      _h['secretKey'] = secretKey.to_jaxb_json_hash unless secretKey.nil?
      _h['cloudProviderName'] = cloudProviderName.to_jaxb_json_hash unless cloudProviderName.nil?
      _h['accessKeyId'] = accessKeyId.to_jaxb_json_hash unless accessKeyId.nil?
      if !keyPairIDs.nil?
        _ha = Array.new
        keyPairIDs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['keyPairIDs'] = _ha
      end
      return _h
    end

    #initializes this CloudCredentials with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['secretKey'].nil?
          _oa = _o['secretKey']
            if(_oa.is_a? Hash)
              @secretKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @secretKey =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @secretKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @secretKey.push String.from_json(_item)
                 else
                   @secretKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @secretKey = _oa
            end
          end
        if !_o['cloudProviderName'].nil?
          _oa = _o['cloudProviderName']
            if(_oa.is_a? Hash)
              @cloudProviderName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cloudProviderName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cloudProviderName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cloudProviderName.push String.from_json(_item)
                 else
                   @cloudProviderName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cloudProviderName = _oa
            end
          end
        if !_o['accessKeyId'].nil?
          _oa = _o['accessKeyId']
            if(_oa.is_a? Hash)
              @accessKeyId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessKeyId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessKeyId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessKeyId.push String.from_json(_item)
                 else
                   @accessKeyId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessKeyId = _oa
            end
          end
        if !_o['keyPairIDs'].nil?
          _oa = _o['keyPairIDs']
            if(_oa.is_a? Hash)
              @keyPairIDs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keyPairIDs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keyPairIDs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keyPairIDs.push String.from_json(_item)
                 else
                   @keyPairIDs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keyPairIDs = _oa
            end
          end
    end

    # constructs a CloudCredentials from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class KeyType

    # For private keys
    PRIVATE = "PRIVATE"

    # For public keys
    PUBLIC = "PUBLIC"
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class Script < Nl::Uva::Sne::Drip::Data::V1::External::OwnedObject 

    # the name
    attr_accessor :name
    # the contents
    attr_accessor :contents

    # the json hash for this Script
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['contents'] = contents.to_jaxb_json_hash unless contents.nil?
      return _h
    end

    #initializes this Script with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['contents'].nil?
          _oa = _o['contents']
            if(_oa.is_a? Hash)
              @contents = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contents =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contents = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contents.push String.from_json(_item)
                 else
                   @contents.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contents = _oa
            end
          end
    end

    # constructs a Script from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class KeyPair < Nl::Uva::Sne::Drip::Data::V1::External::OwnedObject 

    # the privateKey
    attr_accessor :privateKey
    # the publicKey
    attr_accessor :publicKey

    # the json hash for this KeyPair
    def to_jaxb_json_hash
      _h = super
      _h['privateKey'] = privateKey.to_jaxb_json_hash unless privateKey.nil?
      _h['publicKey'] = publicKey.to_jaxb_json_hash unless publicKey.nil?
      return _h
    end

    #initializes this KeyPair with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['privateKey'].nil?
          _oa = _o['privateKey']
            if(_oa.is_a? Hash)
              @privateKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @privateKey =  Nl::Uva::Sne::Drip::Data::V1::External::Key.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @privateKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @privateKey.push Nl::Uva::Sne::Drip::Data::V1::External::Key.from_json(_item)
                 else
                   @privateKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @privateKey = _oa
            end
          end
        if !_o['publicKey'].nil?
          _oa = _o['publicKey']
            if(_oa.is_a? Hash)
              @publicKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @publicKey =  Nl::Uva::Sne::Drip::Data::V1::External::Key.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @publicKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @publicKey.push Nl::Uva::Sne::Drip::Data::V1::External::Key.from_json(_item)
                 else
                   @publicKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @publicKey = _oa
            end
          end
    end

    # constructs a KeyPair from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class KeyValueHolder < Nl::Uva::Sne::Drip::Data::V1::External::OwnedObject 

    # the keyValue
    attr_accessor :keyValue

    # the json hash for this KeyValueHolder
    def to_jaxb_json_hash
      _h = super
      _h['keyValue'] = keyValue.to_jaxb_json_hash unless keyValue.nil?
      return _h
    end

    #initializes this KeyValueHolder with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['keyValue'].nil?
          _oa = _o['keyValue']
            if(_oa.is_a? Hash)
              @keyValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keyValue =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keyValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keyValue.push Hash.from_json(_item)
                 else
                   @keyValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keyValue = _oa
            end
          end
    end

    # constructs a KeyValueHolder from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class DeployRequest < Nl::Uva::Sne::Drip::Data::V1::External::OwnedObject 

    # the provisionID
    attr_accessor :provisionID
    # the managerType
    attr_accessor :managerType
    # the configurationID
    attr_accessor :configurationID

    # the json hash for this DeployRequest
    def to_jaxb_json_hash
      _h = super
      _h['provisionID'] = provisionID.to_jaxb_json_hash unless provisionID.nil?
      _h['managerType'] = managerType.to_jaxb_json_hash unless managerType.nil?
      _h['configurationID'] = configurationID.to_jaxb_json_hash unless configurationID.nil?
      return _h
    end

    #initializes this DeployRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['provisionID'].nil?
          _oa = _o['provisionID']
            if(_oa.is_a? Hash)
              @provisionID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @provisionID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @provisionID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @provisionID.push String.from_json(_item)
                 else
                   @provisionID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @provisionID = _oa
            end
          end
        if !_o['managerType'].nil?
          _oa = _o['managerType']
            if(_oa.is_a? Hash)
              @managerType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @managerType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @managerType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @managerType.push String.from_json(_item)
                 else
                   @managerType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @managerType = _oa
            end
          end
        if !_o['configurationID'].nil?
          _oa = _o['configurationID']
            if(_oa.is_a? Hash)
              @configurationID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @configurationID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @configurationID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @configurationID.push String.from_json(_item)
                 else
                   @configurationID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @configurationID = _oa
            end
          end
    end

    # constructs a DeployRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class ToscaRepresentation < Nl::Uva::Sne::Drip::Data::V1::External::KeyValueHolder 

    # the name
    attr_accessor :name

    # the json hash for this ToscaRepresentation
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    #initializes this ToscaRepresentation with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
    end

    # constructs a ToscaRepresentation from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class DeployResponse < Nl::Uva::Sne::Drip::Data::V1::External::DeployRequest 

    # the ansibleOutputList
    attr_accessor :ansibleOutputList
    # 
    attr_accessor :keyPair

    # the json hash for this DeployResponse
    def to_jaxb_json_hash
      _h = super
      if !ansibleOutputList.nil?
        _ha = Array.new
        ansibleOutputList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['ansibleOutputList'] = _ha
      end
      _h['keyPair'] = keyPair.to_jaxb_json_hash unless keyPair.nil?
      return _h
    end

    #initializes this DeployResponse with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['ansibleOutputList'].nil?
          _oa = _o['ansibleOutputList']
            if(_oa.is_a? Hash)
              @ansibleOutputList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ansibleOutputList =  Nl::Uva::Sne::Drip::Data::V1::External::Ansible::AnsibleOutput.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ansibleOutputList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ansibleOutputList.push Nl::Uva::Sne::Drip::Data::V1::External::Ansible::AnsibleOutput.from_json(_item)
                 else
                   @ansibleOutputList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ansibleOutputList = _oa
            end
          end
        if !_o['keyPair'].nil?
          _oa = _o['keyPair']
            if(_oa.is_a? Hash)
              @keyPair = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keyPair =  Nl::Uva::Sne::Drip::Data::V1::External::KeyPair.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keyPair = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keyPair.push Nl::Uva::Sne::Drip::Data::V1::External::KeyPair.from_json(_item)
                 else
                   @keyPair.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keyPair = _oa
            end
          end
    end

    # constructs a DeployResponse from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class PlaybookRepresentation < Nl::Uva::Sne::Drip::Data::V1::External::KeyValueHolder 


    # the json hash for this PlaybookRepresentation
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this PlaybookRepresentation with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a PlaybookRepresentation from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class PlanResponse < Nl::Uva::Sne::Drip::Data::V1::External::KeyValueHolder 

    # the name
    attr_accessor :name
    # the toscaID
    attr_accessor :toscaID
    # the level
    attr_accessor :level
    # the loweLevelPlansIDs
    attr_accessor :loweLevelPlanIDs

    # the json hash for this PlanResponse
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['toscaID'] = toscaID.to_jaxb_json_hash unless toscaID.nil?
      _h['level'] = level.to_jaxb_json_hash unless level.nil?
      if !loweLevelPlanIDs.nil?
        _ha = Array.new
        loweLevelPlanIDs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['loweLevelPlanIDs'] = _ha
      end
      return _h
    end

    #initializes this PlanResponse with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['toscaID'].nil?
          _oa = _o['toscaID']
            if(_oa.is_a? Hash)
              @toscaID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toscaID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toscaID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toscaID.push String.from_json(_item)
                 else
                   @toscaID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toscaID = _oa
            end
          end
        if !_o['level'].nil?
          _oa = _o['level']
            if(_oa.is_a? Hash)
              @level = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @level =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @level = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @level.push Fixnum.from_json(_item)
                 else
                   @level.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @level = _oa
            end
          end
        if !_o['loweLevelPlanIDs'].nil?
          _oa = _o['loweLevelPlanIDs']
            if(_oa.is_a? Hash)
              @loweLevelPlanIDs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loweLevelPlanIDs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loweLevelPlanIDs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loweLevelPlanIDs.push String.from_json(_item)
                 else
                   @loweLevelPlanIDs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loweLevelPlanIDs = _oa
            end
          end
    end

    # constructs a PlanResponse from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class ProvisionRequest < Nl::Uva::Sne::Drip::Data::V1::External::KeyValueHolder 

    # the cloudCredentialsIDs
    attr_accessor :cloudCredentialsIDs
    # the planID
    attr_accessor :planID
    # the keyPairIDs
    attr_accessor :keyPairIDs

    # the json hash for this ProvisionRequest
    def to_jaxb_json_hash
      _h = super
      if !cloudCredentialsIDs.nil?
        _ha = Array.new
        cloudCredentialsIDs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['cloudCredentialsIDs'] = _ha
      end
      _h['planID'] = planID.to_jaxb_json_hash unless planID.nil?
      if !keyPairIDs.nil?
        _ha = Array.new
        keyPairIDs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['keyPairIDs'] = _ha
      end
      return _h
    end

    #initializes this ProvisionRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['cloudCredentialsIDs'].nil?
          _oa = _o['cloudCredentialsIDs']
            if(_oa.is_a? Hash)
              @cloudCredentialsIDs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cloudCredentialsIDs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cloudCredentialsIDs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cloudCredentialsIDs.push String.from_json(_item)
                 else
                   @cloudCredentialsIDs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cloudCredentialsIDs = _oa
            end
          end
        if !_o['planID'].nil?
          _oa = _o['planID']
            if(_oa.is_a? Hash)
              @planID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @planID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @planID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @planID.push String.from_json(_item)
                 else
                   @planID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @planID = _oa
            end
          end
        if !_o['keyPairIDs'].nil?
          _oa = _o['keyPairIDs']
            if(_oa.is_a? Hash)
              @keyPairIDs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keyPairIDs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keyPairIDs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keyPairIDs.push String.from_json(_item)
                 else
                   @keyPairIDs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keyPairIDs = _oa
            end
          end
    end

    # constructs a ProvisionRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Data

module V1

module External

  # (no documentation provided)
  class ProvisionResponse < Nl::Uva::Sne::Drip::Data::V1::External::ProvisionRequest 

    # the deployParameters
    attr_accessor :deployParameters

    # the json hash for this ProvisionResponse
    def to_jaxb_json_hash
      _h = super
      if !deployParameters.nil?
        _ha = Array.new
        deployParameters.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['deployParameters'] = _ha
      end
      return _h
    end

    #initializes this ProvisionResponse with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['deployParameters'].nil?
          _oa = _o['deployParameters']
            if(_oa.is_a? Hash)
              @deployParameters = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @deployParameters =  Nl::Uva::Sne::Drip::Data::V1::External::DeployParameter.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @deployParameters = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @deployParameters.push Nl::Uva::Sne::Drip::Data::V1::External::DeployParameter.from_json(_item)
                 else
                   @deployParameters.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @deployParameters = _oa
            end
          end
    end

    # constructs a ProvisionResponse from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end
