#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class User 

    # (no documentation provided)
    attr_accessor :username
    # (no documentation provided)
    attr_accessor :accountNonLocked
    # (no documentation provided)
    attr_accessor :credentialsNonExpired
    # (no documentation provided)
    attr_accessor :accountNonExpired
    # (no documentation provided)
    attr_accessor :password
    # (no documentation provided)
    attr_accessor :enabled
    # (no documentation provided)
    attr_accessor :roles
    # (no documentation provided)
    attr_accessor :id

    # the json hash for this User
    def to_jaxb_json_hash
      _h = {}
      _h['username'] = username.to_jaxb_json_hash unless username.nil?
      _h['accountNonLocked'] = accountNonLocked.to_jaxb_json_hash unless accountNonLocked.nil?
      _h['credentialsNonExpired'] = credentialsNonExpired.to_jaxb_json_hash unless credentialsNonExpired.nil?
      _h['accountNonExpired'] = accountNonExpired.to_jaxb_json_hash unless accountNonExpired.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      _h['enabled'] = enabled.to_jaxb_json_hash unless enabled.nil?
      if !roles.nil?
        _ha = Array.new
        roles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['roles'] = _ha
      end
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    # the json (string form) for this User
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this User with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['username'].nil?
          _oa = _o['username']
            if(_oa.is_a? Hash)
              @username = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @username =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @username = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @username.push String.from_json(_item)
                 else
                   @username.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @username = _oa
            end
          end
        if !_o['accountNonLocked'].nil?
          _oa = _o['accountNonLocked']
            if(_oa.is_a? Hash)
              @accountNonLocked = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accountNonLocked =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accountNonLocked = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accountNonLocked.push Boolean.from_json(_item)
                 else
                   @accountNonLocked.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accountNonLocked = _oa
            end
          end
        if !_o['credentialsNonExpired'].nil?
          _oa = _o['credentialsNonExpired']
            if(_oa.is_a? Hash)
              @credentialsNonExpired = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @credentialsNonExpired =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @credentialsNonExpired = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @credentialsNonExpired.push Boolean.from_json(_item)
                 else
                   @credentialsNonExpired.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @credentialsNonExpired = _oa
            end
          end
        if !_o['accountNonExpired'].nil?
          _oa = _o['accountNonExpired']
            if(_oa.is_a? Hash)
              @accountNonExpired = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accountNonExpired =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accountNonExpired = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accountNonExpired.push Boolean.from_json(_item)
                 else
                   @accountNonExpired.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accountNonExpired = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
        if !_o['enabled'].nil?
          _oa = _o['enabled']
            if(_oa.is_a? Hash)
              @enabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enabled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enabled.push Boolean.from_json(_item)
                 else
                   @enabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enabled = _oa
            end
          end
        if !_o['roles'].nil?
          _oa = _o['roles']
            if(_oa.is_a? Hash)
              @roles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @roles =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @roles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @roles.push String.from_json(_item)
                 else
                   @roles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @roles = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
    end

    # constructs a User from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class DeployParameter 

    # (no documentation provided)
    attr_accessor :role
    # (no documentation provided)
    attr_accessor :user
    # (no documentation provided)
    attr_accessor :IP

    # the json hash for this DeployParameter
    def to_jaxb_json_hash
      _h = {}
      _h['role'] = role.to_jaxb_json_hash unless role.nil?
      _h['user'] = user.to_jaxb_json_hash unless user.nil?
      _h['IP'] = IP.to_jaxb_json_hash unless IP.nil?
      return _h
    end

    # the json (string form) for this DeployParameter
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DeployParameter with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['role'].nil?
          _oa = _o['role']
            if(_oa.is_a? Hash)
              @role = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @role =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @role = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @role.push String.from_json(_item)
                 else
                   @role.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @role = _oa
            end
          end
        if !_o['user'].nil?
          _oa = _o['user']
            if(_oa.is_a? Hash)
              @user = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @user =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @user = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @user.push String.from_json(_item)
                 else
                   @user.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @user = _oa
            end
          end
        if !_o['IP'].nil?
          _oa = _o['IP']
            if(_oa.is_a? Hash)
              @IP = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @IP =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @IP = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @IP.push String.from_json(_item)
                 else
                   @IP.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @IP = _oa
            end
          end
    end

    # constructs a DeployParameter from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

module Ansible

  # (no documentation provided)
  class ModuleArgs 

    # (no documentation provided)
    attr_accessor :dpkg_options
    # (no documentation provided)
    attr_accessor :autoremove
    # (no documentation provided)
    attr_accessor :force
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :install_recommends
    # (no documentation provided)
    attr_accessor :package
    # (no documentation provided)
    attr_accessor :purge
    # (no documentation provided)
    attr_accessor :allow_unauthenticated
    # (no documentation provided)
    attr_accessor :state
    # (no documentation provided)
    attr_accessor :upgrade
    # (no documentation provided)
    attr_accessor :update_cache
    # (no documentation provided)
    attr_accessor :deb
    # (no documentation provided)
    attr_accessor :only_upgrade
    # (no documentation provided)
    attr_accessor :default_release
    # (no documentation provided)
    attr_accessor :cache_valid_time
    # (no documentation provided)
    attr_accessor :dpkgOptions
    # (no documentation provided)
    attr_accessor :updateCache
    # (no documentation provided)
    attr_accessor :cacheValidTime
    # (no documentation provided)
    attr_accessor :installRecommends
    # (no documentation provided)
    attr_accessor :defaultRelease
    # (no documentation provided)
    attr_accessor :_package
    # (no documentation provided)
    attr_accessor :allowUnauthenticated
    # (no documentation provided)
    attr_accessor :onlyUpgrade

    # the json hash for this ModuleArgs
    def to_jaxb_json_hash
      _h = {}
      _h['dpkg_options'] = dpkg_options.to_jaxb_json_hash unless dpkg_options.nil?
      _h['autoremove'] = autoremove.to_jaxb_json_hash unless autoremove.nil?
      _h['force'] = force.to_jaxb_json_hash unless force.nil?
      if !name.nil?
        _ha = Array.new
        name.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['name'] = _ha
      end
      _h['install_recommends'] = install_recommends.to_jaxb_json_hash unless install_recommends.nil?
      if !package.nil?
        _ha = Array.new
        package.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['package'] = _ha
      end
      _h['purge'] = purge.to_jaxb_json_hash unless purge.nil?
      _h['allow_unauthenticated'] = allow_unauthenticated.to_jaxb_json_hash unless allow_unauthenticated.nil?
      _h['state'] = state.to_jaxb_json_hash unless state.nil?
      _h['upgrade'] = upgrade.to_jaxb_json_hash unless upgrade.nil?
      _h['update_cache'] = update_cache.to_jaxb_json_hash unless update_cache.nil?
      _h['deb'] = deb.to_jaxb_json_hash unless deb.nil?
      _h['only_upgrade'] = only_upgrade.to_jaxb_json_hash unless only_upgrade.nil?
      _h['default_release'] = default_release.to_jaxb_json_hash unless default_release.nil?
      _h['cache_valid_time'] = cache_valid_time.to_jaxb_json_hash unless cache_valid_time.nil?
      _h['dpkg_options'] = dpkgOptions.to_jaxb_json_hash unless dpkgOptions.nil?
      _h['update_cache'] = updateCache.to_jaxb_json_hash unless updateCache.nil?
      _h['cache_valid_time'] = cacheValidTime.to_jaxb_json_hash unless cacheValidTime.nil?
      _h['install_recommends'] = installRecommends.to_jaxb_json_hash unless installRecommends.nil?
      _h['default_release'] = defaultRelease.to_jaxb_json_hash unless defaultRelease.nil?
      if !_package.nil?
        _ha = Array.new
        _package.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['package'] = _ha
      end
      _h['allow_unauthenticated'] = allowUnauthenticated.to_jaxb_json_hash unless allowUnauthenticated.nil?
      _h['only_upgrade'] = onlyUpgrade.to_jaxb_json_hash unless onlyUpgrade.nil?
      return _h
    end

    # the json (string form) for this ModuleArgs
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ModuleArgs with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['dpkg_options'].nil?
          _oa = _o['dpkg_options']
            if(_oa.is_a? Hash)
              @dpkg_options = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dpkg_options =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dpkg_options = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dpkg_options.push String.from_json(_item)
                 else
                   @dpkg_options.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dpkg_options = _oa
            end
          end
        if !_o['autoremove'].nil?
          _oa = _o['autoremove']
            if(_oa.is_a? Hash)
              @autoremove = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @autoremove =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @autoremove = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @autoremove.push Boolean.from_json(_item)
                 else
                   @autoremove.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @autoremove = _oa
            end
          end
        if !_o['force'].nil?
          _oa = _o['force']
            if(_oa.is_a? Hash)
              @force = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @force =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @force = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @force.push Boolean.from_json(_item)
                 else
                   @force.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @force = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['install_recommends'].nil?
          _oa = _o['install_recommends']
            if(_oa.is_a? Hash)
              @install_recommends = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @install_recommends =  Object.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @install_recommends = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @install_recommends.push Object.from_json(_item)
                 else
                   @install_recommends.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @install_recommends = _oa
            end
          end
        if !_o['package'].nil?
          _oa = _o['package']
            if(_oa.is_a? Hash)
              @package = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @package =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @package = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @package.push String.from_json(_item)
                 else
                   @package.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @package = _oa
            end
          end
        if !_o['purge'].nil?
          _oa = _o['purge']
            if(_oa.is_a? Hash)
              @purge = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @purge =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @purge = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @purge.push Boolean.from_json(_item)
                 else
                   @purge.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @purge = _oa
            end
          end
        if !_o['allow_unauthenticated'].nil?
          _oa = _o['allow_unauthenticated']
            if(_oa.is_a? Hash)
              @allow_unauthenticated = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @allow_unauthenticated =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @allow_unauthenticated = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @allow_unauthenticated.push Boolean.from_json(_item)
                 else
                   @allow_unauthenticated.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @allow_unauthenticated = _oa
            end
          end
        if !_o['state'].nil?
          _oa = _o['state']
            if(_oa.is_a? Hash)
              @state = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @state =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @state = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @state.push String.from_json(_item)
                 else
                   @state.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @state = _oa
            end
          end
        if !_o['upgrade'].nil?
          _oa = _o['upgrade']
            if(_oa.is_a? Hash)
              @upgrade = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @upgrade =  Object.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @upgrade = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @upgrade.push Object.from_json(_item)
                 else
                   @upgrade.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @upgrade = _oa
            end
          end
        if !_o['update_cache'].nil?
          _oa = _o['update_cache']
            if(_oa.is_a? Hash)
              @update_cache = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @update_cache =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @update_cache = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @update_cache.push Boolean.from_json(_item)
                 else
                   @update_cache.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @update_cache = _oa
            end
          end
        if !_o['deb'].nil?
          _oa = _o['deb']
            if(_oa.is_a? Hash)
              @deb = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @deb =  Object.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @deb = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @deb.push Object.from_json(_item)
                 else
                   @deb.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @deb = _oa
            end
          end
        if !_o['only_upgrade'].nil?
          _oa = _o['only_upgrade']
            if(_oa.is_a? Hash)
              @only_upgrade = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @only_upgrade =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @only_upgrade = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @only_upgrade.push Boolean.from_json(_item)
                 else
                   @only_upgrade.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @only_upgrade = _oa
            end
          end
        if !_o['default_release'].nil?
          _oa = _o['default_release']
            if(_oa.is_a? Hash)
              @default_release = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @default_release =  Object.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @default_release = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @default_release.push Object.from_json(_item)
                 else
                   @default_release.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @default_release = _oa
            end
          end
        if !_o['cache_valid_time'].nil?
          _oa = _o['cache_valid_time']
            if(_oa.is_a? Hash)
              @cache_valid_time = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cache_valid_time =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cache_valid_time = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cache_valid_time.push Fixnum.from_json(_item)
                 else
                   @cache_valid_time.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cache_valid_time = _oa
            end
          end
        if !_o['dpkg_options'].nil?
          _oa = _o['dpkg_options']
            if(_oa.is_a? Hash)
              @dpkgOptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dpkgOptions =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dpkgOptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dpkgOptions.push String.from_json(_item)
                 else
                   @dpkgOptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dpkgOptions = _oa
            end
          end
        if !_o['update_cache'].nil?
          _oa = _o['update_cache']
            if(_oa.is_a? Hash)
              @updateCache = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateCache =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateCache = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateCache.push Boolean.from_json(_item)
                 else
                   @updateCache.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateCache = _oa
            end
          end
        if !_o['cache_valid_time'].nil?
          _oa = _o['cache_valid_time']
            if(_oa.is_a? Hash)
              @cacheValidTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cacheValidTime =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cacheValidTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cacheValidTime.push Fixnum.from_json(_item)
                 else
                   @cacheValidTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cacheValidTime = _oa
            end
          end
        if !_o['install_recommends'].nil?
          _oa = _o['install_recommends']
            if(_oa.is_a? Hash)
              @installRecommends = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @installRecommends =  Object.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @installRecommends = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @installRecommends.push Object.from_json(_item)
                 else
                   @installRecommends.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @installRecommends = _oa
            end
          end
        if !_o['default_release'].nil?
          _oa = _o['default_release']
            if(_oa.is_a? Hash)
              @defaultRelease = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @defaultRelease =  Object.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @defaultRelease = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @defaultRelease.push Object.from_json(_item)
                 else
                   @defaultRelease.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @defaultRelease = _oa
            end
          end
        if !_o['package'].nil?
          _oa = _o['package']
            if(_oa.is_a? Hash)
              @_package = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @_package =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @_package = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @_package.push String.from_json(_item)
                 else
                   @_package.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @_package = _oa
            end
          end
        if !_o['allow_unauthenticated'].nil?
          _oa = _o['allow_unauthenticated']
            if(_oa.is_a? Hash)
              @allowUnauthenticated = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @allowUnauthenticated =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @allowUnauthenticated = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @allowUnauthenticated.push Boolean.from_json(_item)
                 else
                   @allowUnauthenticated.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @allowUnauthenticated = _oa
            end
          end
        if !_o['only_upgrade'].nil?
          _oa = _o['only_upgrade']
            if(_oa.is_a? Hash)
              @onlyUpgrade = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @onlyUpgrade =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @onlyUpgrade = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @onlyUpgrade.push Boolean.from_json(_item)
                 else
                   @onlyUpgrade.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @onlyUpgrade = _oa
            end
          end
    end

    # constructs a ModuleArgs from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

module Ansible

  # (no documentation provided)
  class AnsibleResult 

    # (no documentation provided)
    attr_accessor :msg
    # (no documentation provided)
    attr_accessor :stderr
    # (no documentation provided)
    attr_accessor :stdout
    # (no documentation provided)
    attr_accessor :cmd
    # (no documentation provided)
    attr_accessor :start
    # (no documentation provided)
    attr_accessor :delta
    # (no documentation provided)
    attr_accessor :changed
    # (no documentation provided)
    attr_accessor :end

    # the json hash for this AnsibleResult
    def to_jaxb_json_hash
      _h = {}
      _h['msg'] = msg.to_jaxb_json_hash unless msg.nil?
      _h['stderr'] = stderr.to_jaxb_json_hash unless stderr.nil?
      _h['stdout'] = stdout.to_jaxb_json_hash unless stdout.nil?
      if !cmd.nil?
        _ha = Array.new
        cmd.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['cmd'] = _ha
      end
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      _h['delta'] = delta.to_jaxb_json_hash unless delta.nil?
      _h['changed'] = changed.to_jaxb_json_hash unless changed.nil?
      _h['end'] = end.to_jaxb_json_hash unless end.nil?
      return _h
    end

    # the json (string form) for this AnsibleResult
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AnsibleResult with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['msg'].nil?
          _oa = _o['msg']
            if(_oa.is_a? Hash)
              @msg = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @msg =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @msg = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @msg.push String.from_json(_item)
                 else
                   @msg.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @msg = _oa
            end
          end
        if !_o['stderr'].nil?
          _oa = _o['stderr']
            if(_oa.is_a? Hash)
              @stderr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @stderr =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @stderr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @stderr.push String.from_json(_item)
                 else
                   @stderr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @stderr = _oa
            end
          end
        if !_o['stdout'].nil?
          _oa = _o['stdout']
            if(_oa.is_a? Hash)
              @stdout = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @stdout =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @stdout = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @stdout.push String.from_json(_item)
                 else
                   @stdout.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @stdout = _oa
            end
          end
        if !_o['cmd'].nil?
          _oa = _o['cmd']
            if(_oa.is_a? Hash)
              @cmd = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cmd =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cmd = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cmd.push String.from_json(_item)
                 else
                   @cmd.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cmd = _oa
            end
          end
        if !_o['start'].nil?
          _oa = _o['start']
            if(_oa.is_a? Hash)
              @start = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @start =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @start = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @start.push Time.from_json(_item)
                 else
                   @start.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @start = _oa
            end
          end
        if !_o['delta'].nil?
          _oa = _o['delta']
            if(_oa.is_a? Hash)
              @delta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @delta =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @delta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @delta.push Time.from_json(_item)
                 else
                   @delta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @delta = _oa
            end
          end
        if !_o['changed'].nil?
          _oa = _o['changed']
            if(_oa.is_a? Hash)
              @changed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @changed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @changed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @changed.push Boolean.from_json(_item)
                 else
                   @changed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @changed = _oa
            end
          end
        if !_o['end'].nil?
          _oa = _o['end']
            if(_oa.is_a? Hash)
              @end = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @end =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @end = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @end.push Time.from_json(_item)
                 else
                   @end.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @end = _oa
            end
          end
    end

    # constructs a AnsibleResult from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class Key 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :attributes
    # (no documentation provided)
    attr_accessor :key

    # the json hash for this Key
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['attributes'] = attributes.to_jaxb_json_hash unless attributes.nil?
      _h['key'] = key.to_jaxb_json_hash unless key.nil?
      return _h
    end

    # the json (string form) for this Key
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Key with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['attributes'].nil?
          _oa = _o['attributes']
            if(_oa.is_a? Hash)
              @attributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributes.push Hash.from_json(_item)
                 else
                   @attributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributes = _oa
            end
          end
        if !_o['key'].nil?
          _oa = _o['key']
            if(_oa.is_a? Hash)
              @key = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @key =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @key = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @key.push String.from_json(_item)
                 else
                   @key.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @key = _oa
            end
          end
    end

    # constructs a Key from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class OwnedObject 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :timestamp
    # (no documentation provided)
    attr_accessor :owner

    # the json hash for this OwnedObject
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['timestamp'] = timestamp.to_jaxb_json_hash unless timestamp.nil?
      _h['owner'] = owner.to_jaxb_json_hash unless owner.nil?
      return _h
    end

    # the json (string form) for this OwnedObject
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OwnedObject with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['timestamp'].nil?
          _oa = _o['timestamp']
            if(_oa.is_a? Hash)
              @timestamp = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @timestamp =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @timestamp = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @timestamp.push Bignum.from_json(_item)
                 else
                   @timestamp.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @timestamp = _oa
            end
          end
        if !_o['owner'].nil?
          _oa = _o['owner']
            if(_oa.is_a? Hash)
              @owner = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @owner =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @owner = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @owner.push String.from_json(_item)
                 else
                   @owner.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @owner = _oa
            end
          end
    end

    # constructs a OwnedObject from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

module Ansible

  # (no documentation provided)
  class Invocation 

    # (no documentation provided)
    attr_accessor :module_args
    # (no documentation provided)
    attr_accessor :moduleName
    # (no documentation provided)
    attr_accessor :moduleArgs

    # the json hash for this Invocation
    def to_jaxb_json_hash
      _h = {}
      _h['module_args'] = module_args.to_jaxb_json_hash unless module_args.nil?
      _h['module_name'] = moduleName.to_jaxb_json_hash unless moduleName.nil?
      _h['module_args'] = moduleArgs.to_jaxb_json_hash unless moduleArgs.nil?
      return _h
    end

    # the json (string form) for this Invocation
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Invocation with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['module_args'].nil?
          _oa = _o['module_args']
            if(_oa.is_a? Hash)
              @module_args = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @module_args =  Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::Ansible::ModuleArgs.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @module_args = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @module_args.push Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::Ansible::ModuleArgs.from_json(_item)
                 else
                   @module_args.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @module_args = _oa
            end
          end
        if !_o['module_name'].nil?
          _oa = _o['module_name']
            if(_oa.is_a? Hash)
              @moduleName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @moduleName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @moduleName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @moduleName.push String.from_json(_item)
                 else
                   @moduleName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @moduleName = _oa
            end
          end
        if !_o['module_args'].nil?
          _oa = _o['module_args']
            if(_oa.is_a? Hash)
              @moduleArgs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @moduleArgs =  Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::Ansible::ModuleArgs.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @moduleArgs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @moduleArgs.push Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::Ansible::ModuleArgs.from_json(_item)
                 else
                   @moduleArgs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @moduleArgs = _oa
            end
          end
    end

    # constructs a Invocation from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

module Ansible

  # (no documentation provided)
  class BenchmarkResult < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::OwnedObject 

    # (no documentation provided)
    attr_accessor :cloudDeploymentDomain
    # (no documentation provided)
    attr_accessor :end
    # (no documentation provided)
    attr_accessor :start
    # (no documentation provided)
    attr_accessor :vmType
    # (no documentation provided)
    attr_accessor :host
    # (no documentation provided)
    attr_accessor :delta

    # the json hash for this BenchmarkResult
    def to_jaxb_json_hash
      _h = super
      _h['cloudDeploymentDomain'] = cloudDeploymentDomain.to_jaxb_json_hash unless cloudDeploymentDomain.nil?
      _h['end'] = end.to_jaxb_json_hash unless end.nil?
      _h['start'] = start.to_jaxb_json_hash unless start.nil?
      _h['vmType'] = vmType.to_jaxb_json_hash unless vmType.nil?
      _h['host'] = host.to_jaxb_json_hash unless host.nil?
      _h['delta'] = delta.to_jaxb_json_hash unless delta.nil?
      return _h
    end

    #initializes this BenchmarkResult with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['cloudDeploymentDomain'].nil?
          _oa = _o['cloudDeploymentDomain']
            if(_oa.is_a? Hash)
              @cloudDeploymentDomain = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cloudDeploymentDomain =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cloudDeploymentDomain = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cloudDeploymentDomain.push String.from_json(_item)
                 else
                   @cloudDeploymentDomain.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cloudDeploymentDomain = _oa
            end
          end
        if !_o['end'].nil?
          _oa = _o['end']
            if(_oa.is_a? Hash)
              @end = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @end =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @end = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @end.push Time.from_json(_item)
                 else
                   @end.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @end = _oa
            end
          end
        if !_o['start'].nil?
          _oa = _o['start']
            if(_oa.is_a? Hash)
              @start = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @start =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @start = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @start.push Time.from_json(_item)
                 else
                   @start.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @start = _oa
            end
          end
        if !_o['vmType'].nil?
          _oa = _o['vmType']
            if(_oa.is_a? Hash)
              @vmType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vmType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vmType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vmType.push String.from_json(_item)
                 else
                   @vmType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vmType = _oa
            end
          end
        if !_o['host'].nil?
          _oa = _o['host']
            if(_oa.is_a? Hash)
              @host = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @host =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @host = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @host.push String.from_json(_item)
                 else
                   @host.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @host = _oa
            end
          end
        if !_o['delta'].nil?
          _oa = _o['delta']
            if(_oa.is_a? Hash)
              @delta = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @delta =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @delta = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @delta.push Time.from_json(_item)
                 else
                   @delta.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @delta = _oa
            end
          end
    end

    # constructs a BenchmarkResult from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class CloudCredentials < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::OwnedObject 

    # (no documentation provided)
    attr_accessor :attributes
    # (no documentation provided)
    attr_accessor :cloudProviderName
    # (no documentation provided)
    attr_accessor :secretKey
    # (no documentation provided)
    attr_accessor :keyPairIDs
    # (no documentation provided)
    attr_accessor :accessKeyId
    # (no documentation provided)
    attr_accessor :keyPairs

    # the json hash for this CloudCredentials
    def to_jaxb_json_hash
      _h = super
      _h['attributes'] = attributes.to_jaxb_json_hash unless attributes.nil?
      _h['cloudProviderName'] = cloudProviderName.to_jaxb_json_hash unless cloudProviderName.nil?
      _h['secretKey'] = secretKey.to_jaxb_json_hash unless secretKey.nil?
      if !keyPairIDs.nil?
        _ha = Array.new
        keyPairIDs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['keyPairIDs'] = _ha
      end
      _h['accessKeyId'] = accessKeyId.to_jaxb_json_hash unless accessKeyId.nil?
      if !keyPairs.nil?
        _ha = Array.new
        keyPairs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['keyPairs'] = _ha
      end
      return _h
    end

    #initializes this CloudCredentials with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['attributes'].nil?
          _oa = _o['attributes']
            if(_oa.is_a? Hash)
              @attributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributes.push Hash.from_json(_item)
                 else
                   @attributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributes = _oa
            end
          end
        if !_o['cloudProviderName'].nil?
          _oa = _o['cloudProviderName']
            if(_oa.is_a? Hash)
              @cloudProviderName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cloudProviderName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cloudProviderName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cloudProviderName.push String.from_json(_item)
                 else
                   @cloudProviderName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cloudProviderName = _oa
            end
          end
        if !_o['secretKey'].nil?
          _oa = _o['secretKey']
            if(_oa.is_a? Hash)
              @secretKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @secretKey =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @secretKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @secretKey.push String.from_json(_item)
                 else
                   @secretKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @secretKey = _oa
            end
          end
        if !_o['keyPairIDs'].nil?
          _oa = _o['keyPairIDs']
            if(_oa.is_a? Hash)
              @keyPairIDs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keyPairIDs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keyPairIDs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keyPairIDs.push String.from_json(_item)
                 else
                   @keyPairIDs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keyPairIDs = _oa
            end
          end
        if !_o['accessKeyId'].nil?
          _oa = _o['accessKeyId']
            if(_oa.is_a? Hash)
              @accessKeyId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessKeyId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessKeyId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessKeyId.push String.from_json(_item)
                 else
                   @accessKeyId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessKeyId = _oa
            end
          end
        if !_o['keyPairs'].nil?
          _oa = _o['keyPairs']
            if(_oa.is_a? Hash)
              @keyPairs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keyPairs =  Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::KeyPair.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keyPairs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keyPairs.push Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::KeyPair.from_json(_item)
                 else
                   @keyPairs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keyPairs = _oa
            end
          end
    end

    # constructs a CloudCredentials from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class KeyValueHolder < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::OwnedObject 

    # (no documentation provided)
    attr_accessor :keyValue

    # the json hash for this KeyValueHolder
    def to_jaxb_json_hash
      _h = super
      _h['keyValue'] = keyValue.to_jaxb_json_hash unless keyValue.nil?
      return _h
    end

    #initializes this KeyValueHolder with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['keyValue'].nil?
          _oa = _o['keyValue']
            if(_oa.is_a? Hash)
              @keyValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keyValue =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keyValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keyValue.push Hash.from_json(_item)
                 else
                   @keyValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keyValue = _oa
            end
          end
    end

    # constructs a KeyValueHolder from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class KeyType

    # 
    PRIVATE = "PRIVATE"

    # 
    PUBLIC = "PUBLIC"
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class DeployRequest < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::OwnedObject 

    # (no documentation provided)
    attr_accessor :configurationID
    # (no documentation provided)
    attr_accessor :provisionID
    # (no documentation provided)
    attr_accessor :managerType

    # the json hash for this DeployRequest
    def to_jaxb_json_hash
      _h = super
      _h['configurationID'] = configurationID.to_jaxb_json_hash unless configurationID.nil?
      _h['provisionID'] = provisionID.to_jaxb_json_hash unless provisionID.nil?
      _h['managerType'] = managerType.to_jaxb_json_hash unless managerType.nil?
      return _h
    end

    #initializes this DeployRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['configurationID'].nil?
          _oa = _o['configurationID']
            if(_oa.is_a? Hash)
              @configurationID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @configurationID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @configurationID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @configurationID.push String.from_json(_item)
                 else
                   @configurationID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @configurationID = _oa
            end
          end
        if !_o['provisionID'].nil?
          _oa = _o['provisionID']
            if(_oa.is_a? Hash)
              @provisionID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @provisionID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @provisionID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @provisionID.push String.from_json(_item)
                 else
                   @provisionID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @provisionID = _oa
            end
          end
        if !_o['managerType'].nil?
          _oa = _o['managerType']
            if(_oa.is_a? Hash)
              @managerType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @managerType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @managerType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @managerType.push String.from_json(_item)
                 else
                   @managerType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @managerType = _oa
            end
          end
    end

    # constructs a DeployRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class Script < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::OwnedObject 

    # (no documentation provided)
    attr_accessor :contents
    # (no documentation provided)
    attr_accessor :name

    # the json hash for this Script
    def to_jaxb_json_hash
      _h = super
      _h['contents'] = contents.to_jaxb_json_hash unless contents.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    #initializes this Script with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['contents'].nil?
          _oa = _o['contents']
            if(_oa.is_a? Hash)
              @contents = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contents =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contents = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contents.push String.from_json(_item)
                 else
                   @contents.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contents = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
    end

    # constructs a Script from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

module Ansible

  # (no documentation provided)
  class AnsibleOutput < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::OwnedObject 

    # (no documentation provided)
    attr_accessor :host
    # (no documentation provided)
    attr_accessor :result
    # (no documentation provided)
    attr_accessor :vmType
    # (no documentation provided)
    attr_accessor :cloudDeploymentDomain
    # (no documentation provided)
    attr_accessor :cloudProvider
    # (no documentation provided)
    attr_accessor :provisionID

    # the json hash for this AnsibleOutput
    def to_jaxb_json_hash
      _h = super
      _h['host'] = host.to_jaxb_json_hash unless host.nil?
      _h['result'] = result.to_jaxb_json_hash unless result.nil?
      _h['vmType'] = vmType.to_jaxb_json_hash unless vmType.nil?
      _h['cloudDeploymentDomain'] = cloudDeploymentDomain.to_jaxb_json_hash unless cloudDeploymentDomain.nil?
      _h['cloudProvider'] = cloudProvider.to_jaxb_json_hash unless cloudProvider.nil?
      _h['provisionID'] = provisionID.to_jaxb_json_hash unless provisionID.nil?
      return _h
    end

    #initializes this AnsibleOutput with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['host'].nil?
          _oa = _o['host']
            if(_oa.is_a? Hash)
              @host = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @host =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @host = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @host.push String.from_json(_item)
                 else
                   @host.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @host = _oa
            end
          end
        if !_o['result'].nil?
          _oa = _o['result']
            if(_oa.is_a? Hash)
              @result = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @result =  Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::Ansible::AnsibleResult.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @result = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @result.push Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::Ansible::AnsibleResult.from_json(_item)
                 else
                   @result.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @result = _oa
            end
          end
        if !_o['vmType'].nil?
          _oa = _o['vmType']
            if(_oa.is_a? Hash)
              @vmType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vmType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vmType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vmType.push String.from_json(_item)
                 else
                   @vmType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vmType = _oa
            end
          end
        if !_o['cloudDeploymentDomain'].nil?
          _oa = _o['cloudDeploymentDomain']
            if(_oa.is_a? Hash)
              @cloudDeploymentDomain = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cloudDeploymentDomain =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cloudDeploymentDomain = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cloudDeploymentDomain.push String.from_json(_item)
                 else
                   @cloudDeploymentDomain.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cloudDeploymentDomain = _oa
            end
          end
        if !_o['cloudProvider'].nil?
          _oa = _o['cloudProvider']
            if(_oa.is_a? Hash)
              @cloudProvider = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cloudProvider =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cloudProvider = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cloudProvider.push String.from_json(_item)
                 else
                   @cloudProvider.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cloudProvider = _oa
            end
          end
        if !_o['provisionID'].nil?
          _oa = _o['provisionID']
            if(_oa.is_a? Hash)
              @provisionID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @provisionID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @provisionID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @provisionID.push String.from_json(_item)
                 else
                   @provisionID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @provisionID = _oa
            end
          end
    end

    # constructs a AnsibleOutput from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class KeyPair < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::OwnedObject 

    # (no documentation provided)
    attr_accessor :keyPairId
    # (no documentation provided)
    attr_accessor :publicKey
    # (no documentation provided)
    attr_accessor :privateKey

    # the json hash for this KeyPair
    def to_jaxb_json_hash
      _h = super
      _h['keyPairId'] = keyPairId.to_jaxb_json_hash unless keyPairId.nil?
      _h['publicKey'] = publicKey.to_jaxb_json_hash unless publicKey.nil?
      _h['privateKey'] = privateKey.to_jaxb_json_hash unless privateKey.nil?
      return _h
    end

    #initializes this KeyPair with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['keyPairId'].nil?
          _oa = _o['keyPairId']
            if(_oa.is_a? Hash)
              @keyPairId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keyPairId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keyPairId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keyPairId.push String.from_json(_item)
                 else
                   @keyPairId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keyPairId = _oa
            end
          end
        if !_o['publicKey'].nil?
          _oa = _o['publicKey']
            if(_oa.is_a? Hash)
              @publicKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @publicKey =  Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::Key.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @publicKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @publicKey.push Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::Key.from_json(_item)
                 else
                   @publicKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @publicKey = _oa
            end
          end
        if !_o['privateKey'].nil?
          _oa = _o['privateKey']
            if(_oa.is_a? Hash)
              @privateKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @privateKey =  Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::Key.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @privateKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @privateKey.push Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::Key.from_json(_item)
                 else
                   @privateKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @privateKey = _oa
            end
          end
    end

    # constructs a KeyPair from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

module Ansible

  # (no documentation provided)
  class SysbenchCPUBenchmark < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::Ansible::BenchmarkResult 

    # (no documentation provided)
    attr_accessor :executionTime
    # (no documentation provided)
    attr_accessor :avgEventsPerThread
    # (no documentation provided)
    attr_accessor :maxExecutionTimePerRequest
    # (no documentation provided)
    attr_accessor :totalNumberOfEvents
    # (no documentation provided)
    attr_accessor :minExecutionTimePerRequest
    # (no documentation provided)
    attr_accessor :ansibleOutputID
    # (no documentation provided)
    attr_accessor :stddevEventsPerThread
    # (no documentation provided)
    attr_accessor :avgExecTimePerThread
    # (no documentation provided)
    attr_accessor :approx95Percentile
    # (no documentation provided)
    attr_accessor :sysbenchVersion
    # (no documentation provided)
    attr_accessor :avgExecutionTimePerRequest
    # (no documentation provided)
    attr_accessor :stddevExecTimePerThread
    # (no documentation provided)
    attr_accessor :numberOfThreads

    # the json hash for this SysbenchCPUBenchmark
    def to_jaxb_json_hash
      _h = super
      _h['executionTime'] = executionTime.to_jaxb_json_hash unless executionTime.nil?
      _h['avgEventsPerThread'] = avgEventsPerThread.to_jaxb_json_hash unless avgEventsPerThread.nil?
      _h['maxExecutionTimePerRequest'] = maxExecutionTimePerRequest.to_jaxb_json_hash unless maxExecutionTimePerRequest.nil?
      _h['totalNumberOfEvents'] = totalNumberOfEvents.to_jaxb_json_hash unless totalNumberOfEvents.nil?
      _h['minExecutionTimePerRequest'] = minExecutionTimePerRequest.to_jaxb_json_hash unless minExecutionTimePerRequest.nil?
      _h['ansibleOutputID'] = ansibleOutputID.to_jaxb_json_hash unless ansibleOutputID.nil?
      _h['stddevEventsPerThread'] = stddevEventsPerThread.to_jaxb_json_hash unless stddevEventsPerThread.nil?
      _h['avgExecTimePerThread'] = avgExecTimePerThread.to_jaxb_json_hash unless avgExecTimePerThread.nil?
      _h['approx95Percentile'] = approx95Percentile.to_jaxb_json_hash unless approx95Percentile.nil?
      _h['sysbenchVersion'] = sysbenchVersion.to_jaxb_json_hash unless sysbenchVersion.nil?
      _h['avgExecutionTimePerRequest'] = avgExecutionTimePerRequest.to_jaxb_json_hash unless avgExecutionTimePerRequest.nil?
      _h['stddevExecTimePerThread'] = stddevExecTimePerThread.to_jaxb_json_hash unless stddevExecTimePerThread.nil?
      _h['numberOfThreads'] = numberOfThreads.to_jaxb_json_hash unless numberOfThreads.nil?
      return _h
    end

    #initializes this SysbenchCPUBenchmark with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['executionTime'].nil?
          _oa = _o['executionTime']
            if(_oa.is_a? Hash)
              @executionTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @executionTime =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @executionTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @executionTime.push Float.from_json(_item)
                 else
                   @executionTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @executionTime = _oa
            end
          end
        if !_o['avgEventsPerThread'].nil?
          _oa = _o['avgEventsPerThread']
            if(_oa.is_a? Hash)
              @avgEventsPerThread = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @avgEventsPerThread =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @avgEventsPerThread = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @avgEventsPerThread.push Float.from_json(_item)
                 else
                   @avgEventsPerThread.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @avgEventsPerThread = _oa
            end
          end
        if !_o['maxExecutionTimePerRequest'].nil?
          _oa = _o['maxExecutionTimePerRequest']
            if(_oa.is_a? Hash)
              @maxExecutionTimePerRequest = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maxExecutionTimePerRequest =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maxExecutionTimePerRequest = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maxExecutionTimePerRequest.push Float.from_json(_item)
                 else
                   @maxExecutionTimePerRequest.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maxExecutionTimePerRequest = _oa
            end
          end
        if !_o['totalNumberOfEvents'].nil?
          _oa = _o['totalNumberOfEvents']
            if(_oa.is_a? Hash)
              @totalNumberOfEvents = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalNumberOfEvents =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalNumberOfEvents = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalNumberOfEvents.push Fixnum.from_json(_item)
                 else
                   @totalNumberOfEvents.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalNumberOfEvents = _oa
            end
          end
        if !_o['minExecutionTimePerRequest'].nil?
          _oa = _o['minExecutionTimePerRequest']
            if(_oa.is_a? Hash)
              @minExecutionTimePerRequest = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minExecutionTimePerRequest =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minExecutionTimePerRequest = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minExecutionTimePerRequest.push Float.from_json(_item)
                 else
                   @minExecutionTimePerRequest.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minExecutionTimePerRequest = _oa
            end
          end
        if !_o['ansibleOutputID'].nil?
          _oa = _o['ansibleOutputID']
            if(_oa.is_a? Hash)
              @ansibleOutputID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ansibleOutputID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ansibleOutputID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ansibleOutputID.push String.from_json(_item)
                 else
                   @ansibleOutputID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ansibleOutputID = _oa
            end
          end
        if !_o['stddevEventsPerThread'].nil?
          _oa = _o['stddevEventsPerThread']
            if(_oa.is_a? Hash)
              @stddevEventsPerThread = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @stddevEventsPerThread =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @stddevEventsPerThread = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @stddevEventsPerThread.push Float.from_json(_item)
                 else
                   @stddevEventsPerThread.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @stddevEventsPerThread = _oa
            end
          end
        if !_o['avgExecTimePerThread'].nil?
          _oa = _o['avgExecTimePerThread']
            if(_oa.is_a? Hash)
              @avgExecTimePerThread = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @avgExecTimePerThread =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @avgExecTimePerThread = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @avgExecTimePerThread.push Float.from_json(_item)
                 else
                   @avgExecTimePerThread.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @avgExecTimePerThread = _oa
            end
          end
        if !_o['approx95Percentile'].nil?
          _oa = _o['approx95Percentile']
            if(_oa.is_a? Hash)
              @approx95Percentile = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @approx95Percentile =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @approx95Percentile = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @approx95Percentile.push Float.from_json(_item)
                 else
                   @approx95Percentile.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @approx95Percentile = _oa
            end
          end
        if !_o['sysbenchVersion'].nil?
          _oa = _o['sysbenchVersion']
            if(_oa.is_a? Hash)
              @sysbenchVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sysbenchVersion =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sysbenchVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sysbenchVersion.push String.from_json(_item)
                 else
                   @sysbenchVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sysbenchVersion = _oa
            end
          end
        if !_o['avgExecutionTimePerRequest'].nil?
          _oa = _o['avgExecutionTimePerRequest']
            if(_oa.is_a? Hash)
              @avgExecutionTimePerRequest = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @avgExecutionTimePerRequest =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @avgExecutionTimePerRequest = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @avgExecutionTimePerRequest.push Float.from_json(_item)
                 else
                   @avgExecutionTimePerRequest.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @avgExecutionTimePerRequest = _oa
            end
          end
        if !_o['stddevExecTimePerThread'].nil?
          _oa = _o['stddevExecTimePerThread']
            if(_oa.is_a? Hash)
              @stddevExecTimePerThread = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @stddevExecTimePerThread =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @stddevExecTimePerThread = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @stddevExecTimePerThread.push Float.from_json(_item)
                 else
                   @stddevExecTimePerThread.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @stddevExecTimePerThread = _oa
            end
          end
        if !_o['numberOfThreads'].nil?
          _oa = _o['numberOfThreads']
            if(_oa.is_a? Hash)
              @numberOfThreads = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numberOfThreads =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numberOfThreads = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numberOfThreads.push Fixnum.from_json(_item)
                 else
                   @numberOfThreads.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numberOfThreads = _oa
            end
          end
    end

    # constructs a SysbenchCPUBenchmark from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class PlaybookRepresentation < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::KeyValueHolder 


    # the json hash for this PlaybookRepresentation
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this PlaybookRepresentation with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a PlaybookRepresentation from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class ToscaRepresentation < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::KeyValueHolder 

    # (no documentation provided)
    attr_accessor :name

    # the json hash for this ToscaRepresentation
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    #initializes this ToscaRepresentation with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
    end

    # constructs a ToscaRepresentation from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class ProvisionRequest < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::KeyValueHolder 

    # (no documentation provided)
    attr_accessor :cloudCredentialsIDs
    # (no documentation provided)
    attr_accessor :userKeyPairIDs
    # (no documentation provided)
    attr_accessor :deployerKeyPairIDs
    # (no documentation provided)
    attr_accessor :planID

    # the json hash for this ProvisionRequest
    def to_jaxb_json_hash
      _h = super
      if !cloudCredentialsIDs.nil?
        _ha = Array.new
        cloudCredentialsIDs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['cloudCredentialsIDs'] = _ha
      end
      if !userKeyPairIDs.nil?
        _ha = Array.new
        userKeyPairIDs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['userKeyPairIDs'] = _ha
      end
      if !deployerKeyPairIDs.nil?
        _ha = Array.new
        deployerKeyPairIDs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['deployerKeyPairIDs'] = _ha
      end
      _h['planID'] = planID.to_jaxb_json_hash unless planID.nil?
      return _h
    end

    #initializes this ProvisionRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['cloudCredentialsIDs'].nil?
          _oa = _o['cloudCredentialsIDs']
            if(_oa.is_a? Hash)
              @cloudCredentialsIDs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cloudCredentialsIDs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cloudCredentialsIDs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cloudCredentialsIDs.push String.from_json(_item)
                 else
                   @cloudCredentialsIDs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cloudCredentialsIDs = _oa
            end
          end
        if !_o['userKeyPairIDs'].nil?
          _oa = _o['userKeyPairIDs']
            if(_oa.is_a? Hash)
              @userKeyPairIDs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userKeyPairIDs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userKeyPairIDs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userKeyPairIDs.push String.from_json(_item)
                 else
                   @userKeyPairIDs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userKeyPairIDs = _oa
            end
          end
        if !_o['deployerKeyPairIDs'].nil?
          _oa = _o['deployerKeyPairIDs']
            if(_oa.is_a? Hash)
              @deployerKeyPairIDs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @deployerKeyPairIDs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @deployerKeyPairIDs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @deployerKeyPairIDs.push String.from_json(_item)
                 else
                   @deployerKeyPairIDs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @deployerKeyPairIDs = _oa
            end
          end
        if !_o['planID'].nil?
          _oa = _o['planID']
            if(_oa.is_a? Hash)
              @planID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @planID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @planID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @planID.push String.from_json(_item)
                 else
                   @planID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @planID = _oa
            end
          end
    end

    # constructs a ProvisionRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class PlanResponse < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::KeyValueHolder 

    # (no documentation provided)
    attr_accessor :level
    # (no documentation provided)
    attr_accessor :toscaID
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :loweLevelPlanIDs

    # the json hash for this PlanResponse
    def to_jaxb_json_hash
      _h = super
      _h['level'] = level.to_jaxb_json_hash unless level.nil?
      _h['toscaID'] = toscaID.to_jaxb_json_hash unless toscaID.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      if !loweLevelPlanIDs.nil?
        _ha = Array.new
        loweLevelPlanIDs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['loweLevelPlanIDs'] = _ha
      end
      return _h
    end

    #initializes this PlanResponse with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['level'].nil?
          _oa = _o['level']
            if(_oa.is_a? Hash)
              @level = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @level =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @level = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @level.push Fixnum.from_json(_item)
                 else
                   @level.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @level = _oa
            end
          end
        if !_o['toscaID'].nil?
          _oa = _o['toscaID']
            if(_oa.is_a? Hash)
              @toscaID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toscaID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toscaID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toscaID.push String.from_json(_item)
                 else
                   @toscaID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toscaID = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['loweLevelPlanIDs'].nil?
          _oa = _o['loweLevelPlanIDs']
            if(_oa.is_a? Hash)
              @loweLevelPlanIDs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loweLevelPlanIDs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loweLevelPlanIDs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loweLevelPlanIDs.push String.from_json(_item)
                 else
                   @loweLevelPlanIDs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loweLevelPlanIDs = _oa
            end
          end
    end

    # constructs a PlanResponse from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class DeployResponse < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::DeployRequest 

    # (no documentation provided)
    attr_accessor :keyPair
    # (no documentation provided)
    attr_accessor :ansibleOutputList

    # the json hash for this DeployResponse
    def to_jaxb_json_hash
      _h = super
      _h['keyPair'] = keyPair.to_jaxb_json_hash unless keyPair.nil?
      if !ansibleOutputList.nil?
        _ha = Array.new
        ansibleOutputList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['ansibleOutputList'] = _ha
      end
      return _h
    end

    #initializes this DeployResponse with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['keyPair'].nil?
          _oa = _o['keyPair']
            if(_oa.is_a? Hash)
              @keyPair = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @keyPair =  Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::KeyPair.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @keyPair = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @keyPair.push Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::KeyPair.from_json(_item)
                 else
                   @keyPair.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @keyPair = _oa
            end
          end
        if !_o['ansibleOutputList'].nil?
          _oa = _o['ansibleOutputList']
            if(_oa.is_a? Hash)
              @ansibleOutputList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ansibleOutputList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ansibleOutputList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ansibleOutputList.push String.from_json(_item)
                 else
                   @ansibleOutputList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ansibleOutputList = _oa
            end
          end
    end

    # constructs a DeployResponse from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end

module Nl

module Uva

module Sne

module Drip

module Drip

module Commons

module Data

module V1

module External

  # (no documentation provided)
  class ProvisionResponse < Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::ProvisionRequest 

    # (no documentation provided)
    attr_accessor :cloudKeyPairIDs
    # (no documentation provided)
    attr_accessor :deployParameters

    # the json hash for this ProvisionResponse
    def to_jaxb_json_hash
      _h = super
      if !cloudKeyPairIDs.nil?
        _ha = Array.new
        cloudKeyPairIDs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['cloudKeyPairIDs'] = _ha
      end
      if !deployParameters.nil?
        _ha = Array.new
        deployParameters.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['deployParameters'] = _ha
      end
      return _h
    end

    #initializes this ProvisionResponse with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['cloudKeyPairIDs'].nil?
          _oa = _o['cloudKeyPairIDs']
            if(_oa.is_a? Hash)
              @cloudKeyPairIDs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cloudKeyPairIDs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cloudKeyPairIDs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cloudKeyPairIDs.push String.from_json(_item)
                 else
                   @cloudKeyPairIDs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cloudKeyPairIDs = _oa
            end
          end
        if !_o['deployParameters'].nil?
          _oa = _o['deployParameters']
            if(_oa.is_a? Hash)
              @deployParameters = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @deployParameters =  Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::DeployParameter.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @deployParameters = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @deployParameters.push Nl::Uva::Sne::Drip::Drip::Commons::Data::V1::External::DeployParameter.from_json(_item)
                 else
                   @deployParameters.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @deployParameters = _oa
            end
          end
    end

    # constructs a ProvisionResponse from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

end

end

end
