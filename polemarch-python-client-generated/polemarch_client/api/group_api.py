# coding: utf-8

"""
    Polemarch

     ### Polemarch is ansible based service for orchestration infrastructure.  * [Documentation](http://polemarch.readthedocs.io/) * [Issue Tracker](https://gitlab.com/vstconsulting/polemarch/issues) * [Source Code](https://gitlab.com/vstconsulting/polemarch)    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from polemarch_client.api_client import ApiClient


class GroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def group_add(self, data, **kwargs):  # noqa: E501
        """group_add  # noqa: E501

        Create a new group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_add(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GroupCreateMaster data: (required)
        :return: GroupCreateMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_add_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_add_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def group_add_with_http_info(self, data, **kwargs):  # noqa: E501
        """group_add  # noqa: E501

        Create a new group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_add_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GroupCreateMaster data: (required)
        :return: GroupCreateMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupCreateMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_copy(self, id, data, **kwargs):  # noqa: E501
        """group_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_copy(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param Group data: (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_copy_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_copy_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def group_copy_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """group_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_copy_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param Group data: (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_copy`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_copy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/copy/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_edit(self, id, data, **kwargs):  # noqa: E501
        """group_edit  # noqa: E501

        Update one or more fields on an existing group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_edit(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param OneGroup data: (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_edit_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_edit_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def group_edit_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """group_edit  # noqa: E501

        Update one or more fields on an existing group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_edit_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param OneGroup data: (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_get(self, id, **kwargs):  # noqa: E501
        """group_get  # noqa: E501

        Return a group instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def group_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """group_get  # noqa: E501

        Return a group instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_add(self, id, data, **kwargs):  # noqa: E501
        """group_group_add  # noqa: E501

        Create a new group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_add(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param GroupCreateMaster data: (required)
        :return: GroupCreateMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_add_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_add_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def group_group_add_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """group_group_add  # noqa: E501

        Create a new group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_add_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param GroupCreateMaster data: (required)
        :return: GroupCreateMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_group_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupCreateMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_copy(self, group_id, id, data, **kwargs):  # noqa: E501
        """group_group_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_copy(group_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param Group data: (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_copy_with_http_info(group_id, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_copy_with_http_info(group_id, id, data, **kwargs)  # noqa: E501
            return data

    def group_group_copy_with_http_info(self, group_id, id, data, **kwargs):  # noqa: E501
        """group_group_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_copy_with_http_info(group_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param Group data: (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_group_copy`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_copy`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_group_copy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/{group_id}/copy/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_edit(self, group_id, id, data, **kwargs):  # noqa: E501
        """group_group_edit  # noqa: E501

        Update one or more fields on an existing group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_edit(group_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param OneGroup data: (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_edit_with_http_info(group_id, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_edit_with_http_info(group_id, id, data, **kwargs)  # noqa: E501
            return data

    def group_group_edit_with_http_info(self, group_id, id, data, **kwargs):  # noqa: E501
        """group_group_edit  # noqa: E501

        Update one or more fields on an existing group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_edit_with_http_info(group_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param OneGroup data: (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_group_edit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_group_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/{group_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_get(self, group_id, id, **kwargs):  # noqa: E501
        """group_group_get  # noqa: E501

        Return a group instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_get(group_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_get_with_http_info(group_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_get_with_http_info(group_id, id, **kwargs)  # noqa: E501
            return data

    def group_group_get_with_http_info(self, group_id, id, **kwargs):  # noqa: E501
        """group_group_get  # noqa: E501

        Return a group instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_get_with_http_info(group_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_group_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/{group_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_list(self, id, **kwargs):  # noqa: E501
        """group_group_list  # noqa: E501

        Return all groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def group_group_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """group_group_list  # noqa: E501

        Return all groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'name', 'id__not', 'name__not', 'variables', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'name__not' in params:
            query_params.append(('name__not', params['name__not']))  # noqa: E501
        if 'variables' in params:
            query_params.append(('variables', params['variables']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_remove(self, group_id, id, **kwargs):  # noqa: E501
        """group_group_remove  # noqa: E501

        Remove an existing group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_remove(group_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_remove_with_http_info(group_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_remove_with_http_info(group_id, id, **kwargs)  # noqa: E501
            return data

    def group_group_remove_with_http_info(self, group_id, id, **kwargs):  # noqa: E501
        """group_group_remove  # noqa: E501

        Remove an existing group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_remove_with_http_info(group_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_group_remove`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/{group_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_set_owner(self, group_id, id, data, **kwargs):  # noqa: E501
        """group_group_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_set_owner(group_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_set_owner_with_http_info(group_id, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_set_owner_with_http_info(group_id, id, data, **kwargs)  # noqa: E501
            return data

    def group_group_set_owner_with_http_info(self, group_id, id, data, **kwargs):  # noqa: E501
        """group_group_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_set_owner_with_http_info(group_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_set_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_group_set_owner`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_set_owner`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_group_set_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/{group_id}/set_owner/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetOwner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_update(self, group_id, id, data, **kwargs):  # noqa: E501
        """group_group_update  # noqa: E501

        Update a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_update(group_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param OneGroup data: (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_update_with_http_info(group_id, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_update_with_http_info(group_id, id, data, **kwargs)  # noqa: E501
            return data

    def group_group_update_with_http_info(self, group_id, id, data, **kwargs):  # noqa: E501
        """group_group_update  # noqa: E501

        Update a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_update_with_http_info(group_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param OneGroup data: (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_group_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_group_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/{group_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_variables_add(self, group_id, id, data, **kwargs):  # noqa: E501
        """group_group_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_variables_add(group_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_variables_add_with_http_info(group_id, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_variables_add_with_http_info(group_id, id, data, **kwargs)  # noqa: E501
            return data

    def group_group_variables_add_with_http_info(self, group_id, id, data, **kwargs):  # noqa: E501
        """group_group_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_variables_add_with_http_info(group_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_variables_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_group_variables_add`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_variables_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_group_variables_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/{group_id}/variables/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_variables_edit(self, group_id, id, variables_id, data, **kwargs):  # noqa: E501
        """group_group_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_variables_edit(group_id, id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_variables_edit_with_http_info(group_id, id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_variables_edit_with_http_info(group_id, id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def group_group_variables_edit_with_http_info(self, group_id, id, variables_id, data, **kwargs):  # noqa: E501
        """group_group_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_variables_edit_with_http_info(group_id, id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_variables_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_group_variables_edit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_variables_edit`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `group_group_variables_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_group_variables_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/{group_id}/variables/{variables_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_variables_get(self, group_id, id, variables_id, **kwargs):  # noqa: E501
        """group_group_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_variables_get(group_id, id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_variables_get_with_http_info(group_id, id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_variables_get_with_http_info(group_id, id, variables_id, **kwargs)  # noqa: E501
            return data

    def group_group_variables_get_with_http_info(self, group_id, id, variables_id, **kwargs):  # noqa: E501
        """group_group_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_variables_get_with_http_info(group_id, id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_variables_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_group_variables_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_variables_get`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `group_group_variables_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/{group_id}/variables/{variables_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_variables_list(self, group_id, id, **kwargs):  # noqa: E501
        """group_group_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_variables_list(group_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_variables_list_with_http_info(group_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_variables_list_with_http_info(group_id, id, **kwargs)  # noqa: E501
            return data

    def group_group_variables_list_with_http_info(self, group_id, id, **kwargs):  # noqa: E501
        """group_group_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_variables_list_with_http_info(group_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'id2', 'key', 'value', 'id__not', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_variables_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_group_variables_list`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_variables_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/{group_id}/variables/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_variables_remove(self, group_id, id, variables_id, **kwargs):  # noqa: E501
        """group_group_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_variables_remove(group_id, id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_variables_remove_with_http_info(group_id, id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_variables_remove_with_http_info(group_id, id, variables_id, **kwargs)  # noqa: E501
            return data

    def group_group_variables_remove_with_http_info(self, group_id, id, variables_id, **kwargs):  # noqa: E501
        """group_group_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_variables_remove_with_http_info(group_id, id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_variables_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_group_variables_remove`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_variables_remove`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `group_group_variables_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/{group_id}/variables/{variables_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_group_variables_update(self, group_id, id, variables_id, data, **kwargs):  # noqa: E501
        """group_group_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_variables_update(group_id, id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_group_variables_update_with_http_info(group_id, id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_group_variables_update_with_http_info(group_id, id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def group_group_variables_update_with_http_info(self, group_id, id, variables_id, data, **kwargs):  # noqa: E501
        """group_group_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_group_variables_update_with_http_info(group_id, id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: A unique integer value identifying instance of this groups sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_group_variables_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_group_variables_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_group_variables_update`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `group_group_variables_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_group_variables_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/group/{group_id}/variables/{variables_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_add(self, id, data, **kwargs):  # noqa: E501
        """group_host_add  # noqa: E501

        Create a new host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_add(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param OneHost data: (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_add_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_add_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def group_host_add_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """group_host_add  # noqa: E501

        Create a new host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_add_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param OneHost data: (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_host_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_copy(self, host_id, id, data, **kwargs):  # noqa: E501
        """group_host_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_copy(host_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param Host data: (required)
        :return: Host
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_copy_with_http_info(host_id, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_copy_with_http_info(host_id, id, data, **kwargs)  # noqa: E501
            return data

    def group_host_copy_with_http_info(self, host_id, id, data, **kwargs):  # noqa: E501
        """group_host_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_copy_with_http_info(host_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param Host data: (required)
        :return: Host
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `group_host_copy`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_copy`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_host_copy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/{host_id}/copy/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Host',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_edit(self, host_id, id, data, **kwargs):  # noqa: E501
        """group_host_edit  # noqa: E501

        Update one or more fields on an existing host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_edit(host_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param OneHost data: (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_edit_with_http_info(host_id, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_edit_with_http_info(host_id, id, data, **kwargs)  # noqa: E501
            return data

    def group_host_edit_with_http_info(self, host_id, id, data, **kwargs):  # noqa: E501
        """group_host_edit  # noqa: E501

        Update one or more fields on an existing host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_edit_with_http_info(host_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param OneHost data: (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `group_host_edit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_host_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/{host_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_get(self, host_id, id, **kwargs):  # noqa: E501
        """group_host_get  # noqa: E501

        Return a host instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_get(host_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_get_with_http_info(host_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_get_with_http_info(host_id, id, **kwargs)  # noqa: E501
            return data

    def group_host_get_with_http_info(self, host_id, id, **kwargs):  # noqa: E501
        """group_host_get  # noqa: E501

        Return a host instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_get_with_http_info(host_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `group_host_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/{host_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_list(self, id, **kwargs):  # noqa: E501
        """group_host_list  # noqa: E501

        Return all hosts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str type: Instance type.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def group_host_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """group_host_list  # noqa: E501

        Return all hosts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str type: Instance type.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'name', 'type', 'id__not', 'name__not', 'variables', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'name__not' in params:
            query_params.append(('name__not', params['name__not']))  # noqa: E501
        if 'variables' in params:
            query_params.append(('variables', params['variables']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_remove(self, host_id, id, **kwargs):  # noqa: E501
        """group_host_remove  # noqa: E501

        Remove an existing host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_remove(host_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_remove_with_http_info(host_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_remove_with_http_info(host_id, id, **kwargs)  # noqa: E501
            return data

    def group_host_remove_with_http_info(self, host_id, id, **kwargs):  # noqa: E501
        """group_host_remove  # noqa: E501

        Remove an existing host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_remove_with_http_info(host_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `group_host_remove`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/{host_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_set_owner(self, host_id, id, data, **kwargs):  # noqa: E501
        """group_host_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_set_owner(host_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_set_owner_with_http_info(host_id, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_set_owner_with_http_info(host_id, id, data, **kwargs)  # noqa: E501
            return data

    def group_host_set_owner_with_http_info(self, host_id, id, data, **kwargs):  # noqa: E501
        """group_host_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_set_owner_with_http_info(host_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_set_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `group_host_set_owner`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_set_owner`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_host_set_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/{host_id}/set_owner/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetOwner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_update(self, host_id, id, data, **kwargs):  # noqa: E501
        """group_host_update  # noqa: E501

        Update a host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_update(host_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param OneHost data: (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_update_with_http_info(host_id, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_update_with_http_info(host_id, id, data, **kwargs)  # noqa: E501
            return data

    def group_host_update_with_http_info(self, host_id, id, data, **kwargs):  # noqa: E501
        """group_host_update  # noqa: E501

        Update a host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_update_with_http_info(host_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param OneHost data: (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `group_host_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_host_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/{host_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_variables_add(self, host_id, id, data, **kwargs):  # noqa: E501
        """group_host_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_variables_add(host_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_variables_add_with_http_info(host_id, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_variables_add_with_http_info(host_id, id, data, **kwargs)  # noqa: E501
            return data

    def group_host_variables_add_with_http_info(self, host_id, id, data, **kwargs):  # noqa: E501
        """group_host_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_variables_add_with_http_info(host_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_variables_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `group_host_variables_add`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_variables_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_host_variables_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/{host_id}/variables/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_variables_edit(self, host_id, id, variables_id, data, **kwargs):  # noqa: E501
        """group_host_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_variables_edit(host_id, id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_variables_edit_with_http_info(host_id, id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_variables_edit_with_http_info(host_id, id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def group_host_variables_edit_with_http_info(self, host_id, id, variables_id, data, **kwargs):  # noqa: E501
        """group_host_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_variables_edit_with_http_info(host_id, id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_variables_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `group_host_variables_edit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_variables_edit`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `group_host_variables_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_host_variables_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/{host_id}/variables/{variables_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_variables_get(self, host_id, id, variables_id, **kwargs):  # noqa: E501
        """group_host_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_variables_get(host_id, id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_variables_get_with_http_info(host_id, id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_variables_get_with_http_info(host_id, id, variables_id, **kwargs)  # noqa: E501
            return data

    def group_host_variables_get_with_http_info(self, host_id, id, variables_id, **kwargs):  # noqa: E501
        """group_host_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_variables_get_with_http_info(host_id, id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_variables_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `group_host_variables_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_variables_get`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `group_host_variables_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/{host_id}/variables/{variables_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_variables_list(self, host_id, id, **kwargs):  # noqa: E501
        """group_host_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_variables_list(host_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_variables_list_with_http_info(host_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_variables_list_with_http_info(host_id, id, **kwargs)  # noqa: E501
            return data

    def group_host_variables_list_with_http_info(self, host_id, id, **kwargs):  # noqa: E501
        """group_host_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_variables_list_with_http_info(host_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'id2', 'key', 'value', 'id__not', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_variables_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `group_host_variables_list`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_variables_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/{host_id}/variables/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_variables_remove(self, host_id, id, variables_id, **kwargs):  # noqa: E501
        """group_host_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_variables_remove(host_id, id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_variables_remove_with_http_info(host_id, id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_variables_remove_with_http_info(host_id, id, variables_id, **kwargs)  # noqa: E501
            return data

    def group_host_variables_remove_with_http_info(self, host_id, id, variables_id, **kwargs):  # noqa: E501
        """group_host_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_variables_remove_with_http_info(host_id, id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_variables_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `group_host_variables_remove`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_variables_remove`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `group_host_variables_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/{host_id}/variables/{variables_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_host_variables_update(self, host_id, id, variables_id, data, **kwargs):  # noqa: E501
        """group_host_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_variables_update(host_id, id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_host_variables_update_with_http_info(host_id, id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_host_variables_update_with_http_info(host_id, id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def group_host_variables_update_with_http_info(self, host_id, id, variables_id, data, **kwargs):  # noqa: E501
        """group_host_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_host_variables_update_with_http_info(host_id, id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int host_id: A unique integer value identifying instance of this hosts sublist. (required)
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_host_variables_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `group_host_variables_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_host_variables_update`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `group_host_variables_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_host_variables_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/host/{host_id}/variables/{variables_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_list(self, **kwargs):  # noqa: E501
        """group_list  # noqa: E501

        Return all groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.group_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def group_list_with_http_info(self, **kwargs):  # noqa: E501
        """group_list  # noqa: E501

        Return all groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'id__not', 'name__not', 'variables', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'name__not' in params:
            query_params.append(('name__not', params['name__not']))  # noqa: E501
        if 'variables' in params:
            query_params.append(('variables', params['variables']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_remove(self, id, **kwargs):  # noqa: E501
        """group_remove  # noqa: E501

        Remove an existing group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_remove(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_remove_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_remove_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def group_remove_with_http_info(self, id, **kwargs):  # noqa: E501
        """group_remove  # noqa: E501

        Remove an existing group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_remove_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_set_owner(self, id, data, **kwargs):  # noqa: E501
        """group_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_set_owner(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_set_owner_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_set_owner_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def group_set_owner_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """group_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_set_owner_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_set_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_set_owner`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_set_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/set_owner/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetOwner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_update(self, id, data, **kwargs):  # noqa: E501
        """group_update  # noqa: E501

        Update a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param OneGroup data: (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def group_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """group_update  # noqa: E501

        Update a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param OneGroup data: (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_variables_add(self, id, data, **kwargs):  # noqa: E501
        """group_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_variables_add(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_variables_add_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_variables_add_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def group_variables_add_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """group_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_variables_add_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_variables_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_variables_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_variables_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/variables/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_variables_edit(self, id, variables_id, data, **kwargs):  # noqa: E501
        """group_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_variables_edit(id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_variables_edit_with_http_info(id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_variables_edit_with_http_info(id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def group_variables_edit_with_http_info(self, id, variables_id, data, **kwargs):  # noqa: E501
        """group_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_variables_edit_with_http_info(id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_variables_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_variables_edit`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `group_variables_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_variables_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/variables/{variables_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_variables_get(self, id, variables_id, **kwargs):  # noqa: E501
        """group_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_variables_get(id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_variables_get_with_http_info(id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_variables_get_with_http_info(id, variables_id, **kwargs)  # noqa: E501
            return data

    def group_variables_get_with_http_info(self, id, variables_id, **kwargs):  # noqa: E501
        """group_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_variables_get_with_http_info(id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_variables_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_variables_get`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `group_variables_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/variables/{variables_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_variables_list(self, id, **kwargs):  # noqa: E501
        """group_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_variables_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_variables_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_variables_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def group_variables_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """group_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_variables_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'key', 'value', 'id__not', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_variables_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_variables_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/variables/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_variables_remove(self, id, variables_id, **kwargs):  # noqa: E501
        """group_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_variables_remove(id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_variables_remove_with_http_info(id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_variables_remove_with_http_info(id, variables_id, **kwargs)  # noqa: E501
            return data

    def group_variables_remove_with_http_info(self, id, variables_id, **kwargs):  # noqa: E501
        """group_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_variables_remove_with_http_info(id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_variables_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_variables_remove`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `group_variables_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/variables/{variables_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_variables_update(self, id, variables_id, data, **kwargs):  # noqa: E501
        """group_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_variables_update(id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_variables_update_with_http_info(id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.group_variables_update_with_http_info(id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def group_variables_update_with_http_info(self, id, variables_id, data, **kwargs):  # noqa: E501
        """group_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_variables_update_with_http_info(id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this group. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_variables_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_variables_update`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `group_variables_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `group_variables_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/group/{id}/variables/{variables_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
