# coding: utf-8

"""
    Polemarch

     ### Polemarch is ansible based service for orchestration infrastructure.  * [Documentation](http://polemarch.readthedocs.io/) * [Issue Tracker](https://gitlab.com/vstconsulting/polemarch/issues) * [Source Code](https://gitlab.com/vstconsulting/polemarch)    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OnePeriodictask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'kind': 'str',
        'mode': 'str',
        'inventory': 'str',
        'save_result': 'bool',
        'template': 'int',
        'template_opt': 'str',
        'enabled': 'bool',
        'type': 'str',
        'schedule': 'str',
        'notes': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'kind': 'kind',
        'mode': 'mode',
        'inventory': 'inventory',
        'save_result': 'save_result',
        'template': 'template',
        'template_opt': 'template_opt',
        'enabled': 'enabled',
        'type': 'type',
        'schedule': 'schedule',
        'notes': 'notes'
    }

    def __init__(self, id=None, name=None, kind='PLAYBOOK', mode=None, inventory=None, save_result=None, template=None, template_opt=None, enabled=None, type='CRONTAB', schedule=None, notes=None):  # noqa: E501
        """OnePeriodictask - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._kind = None
        self._mode = None
        self._inventory = None
        self._save_result = None
        self._template = None
        self._template_opt = None
        self._enabled = None
        self._type = None
        self._schedule = None
        self._notes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if kind is not None:
            self.kind = kind
        if mode is not None:
            self.mode = mode
        if inventory is not None:
            self.inventory = inventory
        if save_result is not None:
            self.save_result = save_result
        if template is not None:
            self.template = template
        if template_opt is not None:
            self.template_opt = template_opt
        if enabled is not None:
            self.enabled = enabled
        if type is not None:
            self.type = type
        self.schedule = schedule
        if notes is not None:
            self.notes = notes

    @property
    def id(self):
        """Gets the id of this OnePeriodictask.  # noqa: E501


        :return: The id of this OnePeriodictask.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OnePeriodictask.


        :param id: The id of this OnePeriodictask.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OnePeriodictask.  # noqa: E501


        :return: The name of this OnePeriodictask.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OnePeriodictask.


        :param name: The name of this OnePeriodictask.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 512:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `512`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def kind(self):
        """Gets the kind of this OnePeriodictask.  # noqa: E501


        :return: The kind of this OnePeriodictask.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this OnePeriodictask.


        :param kind: The kind of this OnePeriodictask.  # noqa: E501
        :type: str
        """
        allowed_values = ["PLAYBOOK", "MODULE", "TEMPLATE"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def mode(self):
        """Gets the mode of this OnePeriodictask.  # noqa: E501


        :return: The mode of this OnePeriodictask.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this OnePeriodictask.


        :param mode: The mode of this OnePeriodictask.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def inventory(self):
        """Gets the inventory of this OnePeriodictask.  # noqa: E501


        :return: The inventory of this OnePeriodictask.  # noqa: E501
        :rtype: str
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this OnePeriodictask.


        :param inventory: The inventory of this OnePeriodictask.  # noqa: E501
        :type: str
        """

        self._inventory = inventory

    @property
    def save_result(self):
        """Gets the save_result of this OnePeriodictask.  # noqa: E501


        :return: The save_result of this OnePeriodictask.  # noqa: E501
        :rtype: bool
        """
        return self._save_result

    @save_result.setter
    def save_result(self, save_result):
        """Sets the save_result of this OnePeriodictask.


        :param save_result: The save_result of this OnePeriodictask.  # noqa: E501
        :type: bool
        """

        self._save_result = save_result

    @property
    def template(self):
        """Gets the template of this OnePeriodictask.  # noqa: E501


        :return: The template of this OnePeriodictask.  # noqa: E501
        :rtype: int
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this OnePeriodictask.


        :param template: The template of this OnePeriodictask.  # noqa: E501
        :type: int
        """

        self._template = template

    @property
    def template_opt(self):
        """Gets the template_opt of this OnePeriodictask.  # noqa: E501


        :return: The template_opt of this OnePeriodictask.  # noqa: E501
        :rtype: str
        """
        return self._template_opt

    @template_opt.setter
    def template_opt(self, template_opt):
        """Sets the template_opt of this OnePeriodictask.


        :param template_opt: The template_opt of this OnePeriodictask.  # noqa: E501
        :type: str
        """

        self._template_opt = template_opt

    @property
    def enabled(self):
        """Gets the enabled of this OnePeriodictask.  # noqa: E501


        :return: The enabled of this OnePeriodictask.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this OnePeriodictask.


        :param enabled: The enabled of this OnePeriodictask.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def type(self):
        """Gets the type of this OnePeriodictask.  # noqa: E501


        :return: The type of this OnePeriodictask.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OnePeriodictask.


        :param type: The type of this OnePeriodictask.  # noqa: E501
        :type: str
        """
        allowed_values = ["CRONTAB", "INTERVAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def schedule(self):
        """Gets the schedule of this OnePeriodictask.  # noqa: E501


        :return: The schedule of this OnePeriodictask.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this OnePeriodictask.


        :param schedule: The schedule of this OnePeriodictask.  # noqa: E501
        :type: str
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")  # noqa: E501

        self._schedule = schedule

    @property
    def notes(self):
        """Gets the notes of this OnePeriodictask.  # noqa: E501


        :return: The notes of this OnePeriodictask.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this OnePeriodictask.


        :param notes: The notes of this OnePeriodictask.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OnePeriodictask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OnePeriodictask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
