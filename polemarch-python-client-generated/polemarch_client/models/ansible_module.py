# coding: utf-8

"""
    Polemarch

     ### Polemarch is ansible based service for orchestration infrastructure.  * [Documentation](http://polemarch.readthedocs.io/) * [Issue Tracker](https://gitlab.com/vstconsulting/polemarch/issues) * [Source Code](https://gitlab.com/vstconsulting/polemarch)    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AnsibleModule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'module': 'str',
        'args': 'str',
        'background': 'int',
        'become': 'bool',
        'become_method': 'str',
        'become_user': 'str',
        'check': 'bool',
        'connection': 'str',
        'diff': 'bool',
        'extra_vars': 'str',
        'forks': 'int',
        'inventory': 'str',
        'limit': 'str',
        'list_hosts': 'bool',
        'module_path': 'str',
        'one_line': 'bool',
        'playbook_dir': 'str',
        'poll': 'int',
        'private_key': 'str',
        'scp_extra_args': 'str',
        'sftp_extra_args': 'str',
        'ssh_common_args': 'str',
        'ssh_extra_args': 'str',
        'syntax_check': 'bool',
        'timeout': 'int',
        'tree': 'str',
        'user': 'str',
        'vault_id': 'str',
        'vault_password_file': 'str',
        'verbose': 'int',
        'group': 'str'
    }

    attribute_map = {
        'module': 'module',
        'args': 'args',
        'background': 'background',
        'become': 'become',
        'become_method': 'become_method',
        'become_user': 'become_user',
        'check': 'check',
        'connection': 'connection',
        'diff': 'diff',
        'extra_vars': 'extra_vars',
        'forks': 'forks',
        'inventory': 'inventory',
        'limit': 'limit',
        'list_hosts': 'list_hosts',
        'module_path': 'module_path',
        'one_line': 'one_line',
        'playbook_dir': 'playbook_dir',
        'poll': 'poll',
        'private_key': 'private_key',
        'scp_extra_args': 'scp_extra_args',
        'sftp_extra_args': 'sftp_extra_args',
        'ssh_common_args': 'ssh_common_args',
        'ssh_extra_args': 'ssh_extra_args',
        'syntax_check': 'syntax_check',
        'timeout': 'timeout',
        'tree': 'tree',
        'user': 'user',
        'vault_id': 'vault_id',
        'vault_password_file': 'vault_password_file',
        'verbose': 'verbose',
        'group': 'group'
    }

    def __init__(self, module=None, args=None, background=None, become=False, become_method=None, become_user=None, check=False, connection=None, diff=False, extra_vars=None, forks=None, inventory=None, limit=None, list_hosts=False, module_path=None, one_line=False, playbook_dir=None, poll=None, private_key=None, scp_extra_args=None, sftp_extra_args=None, ssh_common_args=None, ssh_extra_args=None, syntax_check=False, timeout=None, tree=None, user=None, vault_id=None, vault_password_file=None, verbose=None, group='all'):  # noqa: E501
        """AnsibleModule - a model defined in Swagger"""  # noqa: E501

        self._module = None
        self._args = None
        self._background = None
        self._become = None
        self._become_method = None
        self._become_user = None
        self._check = None
        self._connection = None
        self._diff = None
        self._extra_vars = None
        self._forks = None
        self._inventory = None
        self._limit = None
        self._list_hosts = None
        self._module_path = None
        self._one_line = None
        self._playbook_dir = None
        self._poll = None
        self._private_key = None
        self._scp_extra_args = None
        self._sftp_extra_args = None
        self._ssh_common_args = None
        self._ssh_extra_args = None
        self._syntax_check = None
        self._timeout = None
        self._tree = None
        self._user = None
        self._vault_id = None
        self._vault_password_file = None
        self._verbose = None
        self._group = None
        self.discriminator = None

        self.module = module
        if args is not None:
            self.args = args
        if background is not None:
            self.background = background
        if become is not None:
            self.become = become
        if become_method is not None:
            self.become_method = become_method
        if become_user is not None:
            self.become_user = become_user
        if check is not None:
            self.check = check
        if connection is not None:
            self.connection = connection
        if diff is not None:
            self.diff = diff
        if extra_vars is not None:
            self.extra_vars = extra_vars
        if forks is not None:
            self.forks = forks
        if inventory is not None:
            self.inventory = inventory
        if limit is not None:
            self.limit = limit
        if list_hosts is not None:
            self.list_hosts = list_hosts
        if module_path is not None:
            self.module_path = module_path
        if one_line is not None:
            self.one_line = one_line
        if playbook_dir is not None:
            self.playbook_dir = playbook_dir
        if poll is not None:
            self.poll = poll
        if private_key is not None:
            self.private_key = private_key
        if scp_extra_args is not None:
            self.scp_extra_args = scp_extra_args
        if sftp_extra_args is not None:
            self.sftp_extra_args = sftp_extra_args
        if ssh_common_args is not None:
            self.ssh_common_args = ssh_common_args
        if ssh_extra_args is not None:
            self.ssh_extra_args = ssh_extra_args
        if syntax_check is not None:
            self.syntax_check = syntax_check
        if timeout is not None:
            self.timeout = timeout
        if tree is not None:
            self.tree = tree
        if user is not None:
            self.user = user
        if vault_id is not None:
            self.vault_id = vault_id
        if vault_password_file is not None:
            self.vault_password_file = vault_password_file
        if verbose is not None:
            self.verbose = verbose
        if group is not None:
            self.group = group

    @property
    def module(self):
        """Gets the module of this AnsibleModule.  # noqa: E501


        :return: The module of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this AnsibleModule.


        :param module: The module of this AnsibleModule.  # noqa: E501
        :type: str
        """
        if module is None:
            raise ValueError("Invalid value for `module`, must not be `None`")  # noqa: E501

        self._module = module

    @property
    def args(self):
        """Gets the args of this AnsibleModule.  # noqa: E501

        host pattern  # noqa: E501

        :return: The args of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this AnsibleModule.

        host pattern  # noqa: E501

        :param args: The args of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._args = args

    @property
    def background(self):
        """Gets the background of this AnsibleModule.  # noqa: E501

        run asynchronously, failing after X seconds (default=N/A)  # noqa: E501

        :return: The background of this AnsibleModule.  # noqa: E501
        :rtype: int
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this AnsibleModule.

        run asynchronously, failing after X seconds (default=N/A)  # noqa: E501

        :param background: The background of this AnsibleModule.  # noqa: E501
        :type: int
        """

        self._background = background

    @property
    def become(self):
        """Gets the become of this AnsibleModule.  # noqa: E501

        run operations with become (does not imply password prompting)  # noqa: E501

        :return: The become of this AnsibleModule.  # noqa: E501
        :rtype: bool
        """
        return self._become

    @become.setter
    def become(self, become):
        """Sets the become of this AnsibleModule.

        run operations with become (does not imply password prompting)  # noqa: E501

        :param become: The become of this AnsibleModule.  # noqa: E501
        :type: bool
        """

        self._become = become

    @property
    def become_method(self):
        """Gets the become_method of this AnsibleModule.  # noqa: E501

        privilege escalation method to use (default=sudo), use `ansible-doc -t become -l` to list valid choices.  # noqa: E501

        :return: The become_method of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._become_method

    @become_method.setter
    def become_method(self, become_method):
        """Sets the become_method of this AnsibleModule.

        privilege escalation method to use (default=sudo), use `ansible-doc -t become -l` to list valid choices.  # noqa: E501

        :param become_method: The become_method of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._become_method = become_method

    @property
    def become_user(self):
        """Gets the become_user of this AnsibleModule.  # noqa: E501

        run operations as this user (default=root)  # noqa: E501

        :return: The become_user of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._become_user

    @become_user.setter
    def become_user(self, become_user):
        """Sets the become_user of this AnsibleModule.

        run operations as this user (default=root)  # noqa: E501

        :param become_user: The become_user of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._become_user = become_user

    @property
    def check(self):
        """Gets the check of this AnsibleModule.  # noqa: E501

        don't make any changes; instead, try to predict some of the changes that may occur  # noqa: E501

        :return: The check of this AnsibleModule.  # noqa: E501
        :rtype: bool
        """
        return self._check

    @check.setter
    def check(self, check):
        """Sets the check of this AnsibleModule.

        don't make any changes; instead, try to predict some of the changes that may occur  # noqa: E501

        :param check: The check of this AnsibleModule.  # noqa: E501
        :type: bool
        """

        self._check = check

    @property
    def connection(self):
        """Gets the connection of this AnsibleModule.  # noqa: E501

        connection type to use (default=smart)  # noqa: E501

        :return: The connection of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this AnsibleModule.

        connection type to use (default=smart)  # noqa: E501

        :param connection: The connection of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._connection = connection

    @property
    def diff(self):
        """Gets the diff of this AnsibleModule.  # noqa: E501

        when changing (small) files and templates, show the differences in those files; works great with --check  # noqa: E501

        :return: The diff of this AnsibleModule.  # noqa: E501
        :rtype: bool
        """
        return self._diff

    @diff.setter
    def diff(self, diff):
        """Sets the diff of this AnsibleModule.

        when changing (small) files and templates, show the differences in those files; works great with --check  # noqa: E501

        :param diff: The diff of this AnsibleModule.  # noqa: E501
        :type: bool
        """

        self._diff = diff

    @property
    def extra_vars(self):
        """Gets the extra_vars of this AnsibleModule.  # noqa: E501

        set additional variables as key=value or YAML/JSON, if filename prepend with @  # noqa: E501

        :return: The extra_vars of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._extra_vars

    @extra_vars.setter
    def extra_vars(self, extra_vars):
        """Sets the extra_vars of this AnsibleModule.

        set additional variables as key=value or YAML/JSON, if filename prepend with @  # noqa: E501

        :param extra_vars: The extra_vars of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._extra_vars = extra_vars

    @property
    def forks(self):
        """Gets the forks of this AnsibleModule.  # noqa: E501

        specify number of parallel processes to use (default=5)  # noqa: E501

        :return: The forks of this AnsibleModule.  # noqa: E501
        :rtype: int
        """
        return self._forks

    @forks.setter
    def forks(self, forks):
        """Sets the forks of this AnsibleModule.

        specify number of parallel processes to use (default=5)  # noqa: E501

        :param forks: The forks of this AnsibleModule.  # noqa: E501
        :type: int
        """

        self._forks = forks

    @property
    def inventory(self):
        """Gets the inventory of this AnsibleModule.  # noqa: E501

        specify inventory host path or comma separated host list. --inventory-file is deprecated  # noqa: E501

        :return: The inventory of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this AnsibleModule.

        specify inventory host path or comma separated host list. --inventory-file is deprecated  # noqa: E501

        :param inventory: The inventory of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._inventory = inventory

    @property
    def limit(self):
        """Gets the limit of this AnsibleModule.  # noqa: E501

        further limit selected hosts to an additional pattern  # noqa: E501

        :return: The limit of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this AnsibleModule.

        further limit selected hosts to an additional pattern  # noqa: E501

        :param limit: The limit of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._limit = limit

    @property
    def list_hosts(self):
        """Gets the list_hosts of this AnsibleModule.  # noqa: E501

        outputs a list of matching hosts; does not execute anything else  # noqa: E501

        :return: The list_hosts of this AnsibleModule.  # noqa: E501
        :rtype: bool
        """
        return self._list_hosts

    @list_hosts.setter
    def list_hosts(self, list_hosts):
        """Sets the list_hosts of this AnsibleModule.

        outputs a list of matching hosts; does not execute anything else  # noqa: E501

        :param list_hosts: The list_hosts of this AnsibleModule.  # noqa: E501
        :type: bool
        """

        self._list_hosts = list_hosts

    @property
    def module_path(self):
        """Gets the module_path of this AnsibleModule.  # noqa: E501

        prepend colon-separated path(s) to module library (default=~/.ansible/plugins/modules:/usr/share/ansible/plugins/modules)  # noqa: E501

        :return: The module_path of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._module_path

    @module_path.setter
    def module_path(self, module_path):
        """Sets the module_path of this AnsibleModule.

        prepend colon-separated path(s) to module library (default=~/.ansible/plugins/modules:/usr/share/ansible/plugins/modules)  # noqa: E501

        :param module_path: The module_path of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._module_path = module_path

    @property
    def one_line(self):
        """Gets the one_line of this AnsibleModule.  # noqa: E501

        condense output  # noqa: E501

        :return: The one_line of this AnsibleModule.  # noqa: E501
        :rtype: bool
        """
        return self._one_line

    @one_line.setter
    def one_line(self, one_line):
        """Sets the one_line of this AnsibleModule.

        condense output  # noqa: E501

        :param one_line: The one_line of this AnsibleModule.  # noqa: E501
        :type: bool
        """

        self._one_line = one_line

    @property
    def playbook_dir(self):
        """Gets the playbook_dir of this AnsibleModule.  # noqa: E501

        Since this tool does not use playbooks, use this as a substitute playbook directory.This sets the relative path for many features including roles/ group_vars/ etc.  # noqa: E501

        :return: The playbook_dir of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._playbook_dir

    @playbook_dir.setter
    def playbook_dir(self, playbook_dir):
        """Sets the playbook_dir of this AnsibleModule.

        Since this tool does not use playbooks, use this as a substitute playbook directory.This sets the relative path for many features including roles/ group_vars/ etc.  # noqa: E501

        :param playbook_dir: The playbook_dir of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._playbook_dir = playbook_dir

    @property
    def poll(self):
        """Gets the poll of this AnsibleModule.  # noqa: E501

        set the poll interval if using -B (default=15)  # noqa: E501

        :return: The poll of this AnsibleModule.  # noqa: E501
        :rtype: int
        """
        return self._poll

    @poll.setter
    def poll(self, poll):
        """Sets the poll of this AnsibleModule.

        set the poll interval if using -B (default=15)  # noqa: E501

        :param poll: The poll of this AnsibleModule.  # noqa: E501
        :type: int
        """

        self._poll = poll

    @property
    def private_key(self):
        """Gets the private_key of this AnsibleModule.  # noqa: E501

        use this file to authenticate the connection  # noqa: E501

        :return: The private_key of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this AnsibleModule.

        use this file to authenticate the connection  # noqa: E501

        :param private_key: The private_key of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def scp_extra_args(self):
        """Gets the scp_extra_args of this AnsibleModule.  # noqa: E501

        specify extra arguments to pass to scp only (e.g. -l)  # noqa: E501

        :return: The scp_extra_args of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._scp_extra_args

    @scp_extra_args.setter
    def scp_extra_args(self, scp_extra_args):
        """Sets the scp_extra_args of this AnsibleModule.

        specify extra arguments to pass to scp only (e.g. -l)  # noqa: E501

        :param scp_extra_args: The scp_extra_args of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._scp_extra_args = scp_extra_args

    @property
    def sftp_extra_args(self):
        """Gets the sftp_extra_args of this AnsibleModule.  # noqa: E501

        specify extra arguments to pass to sftp only (e.g. -f, -l)  # noqa: E501

        :return: The sftp_extra_args of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._sftp_extra_args

    @sftp_extra_args.setter
    def sftp_extra_args(self, sftp_extra_args):
        """Sets the sftp_extra_args of this AnsibleModule.

        specify extra arguments to pass to sftp only (e.g. -f, -l)  # noqa: E501

        :param sftp_extra_args: The sftp_extra_args of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._sftp_extra_args = sftp_extra_args

    @property
    def ssh_common_args(self):
        """Gets the ssh_common_args of this AnsibleModule.  # noqa: E501

        specify common arguments to pass to sftp/scp/ssh (e.g. ProxyCommand)  # noqa: E501

        :return: The ssh_common_args of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._ssh_common_args

    @ssh_common_args.setter
    def ssh_common_args(self, ssh_common_args):
        """Sets the ssh_common_args of this AnsibleModule.

        specify common arguments to pass to sftp/scp/ssh (e.g. ProxyCommand)  # noqa: E501

        :param ssh_common_args: The ssh_common_args of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._ssh_common_args = ssh_common_args

    @property
    def ssh_extra_args(self):
        """Gets the ssh_extra_args of this AnsibleModule.  # noqa: E501

        specify extra arguments to pass to ssh only (e.g. -R)  # noqa: E501

        :return: The ssh_extra_args of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._ssh_extra_args

    @ssh_extra_args.setter
    def ssh_extra_args(self, ssh_extra_args):
        """Sets the ssh_extra_args of this AnsibleModule.

        specify extra arguments to pass to ssh only (e.g. -R)  # noqa: E501

        :param ssh_extra_args: The ssh_extra_args of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._ssh_extra_args = ssh_extra_args

    @property
    def syntax_check(self):
        """Gets the syntax_check of this AnsibleModule.  # noqa: E501

        perform a syntax check on the playbook, but do not execute it  # noqa: E501

        :return: The syntax_check of this AnsibleModule.  # noqa: E501
        :rtype: bool
        """
        return self._syntax_check

    @syntax_check.setter
    def syntax_check(self, syntax_check):
        """Sets the syntax_check of this AnsibleModule.

        perform a syntax check on the playbook, but do not execute it  # noqa: E501

        :param syntax_check: The syntax_check of this AnsibleModule.  # noqa: E501
        :type: bool
        """

        self._syntax_check = syntax_check

    @property
    def timeout(self):
        """Gets the timeout of this AnsibleModule.  # noqa: E501

        override the connection timeout in seconds (default=10)  # noqa: E501

        :return: The timeout of this AnsibleModule.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this AnsibleModule.

        override the connection timeout in seconds (default=10)  # noqa: E501

        :param timeout: The timeout of this AnsibleModule.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def tree(self):
        """Gets the tree of this AnsibleModule.  # noqa: E501

        log output to this directory  # noqa: E501

        :return: The tree of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """Sets the tree of this AnsibleModule.

        log output to this directory  # noqa: E501

        :param tree: The tree of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._tree = tree

    @property
    def user(self):
        """Gets the user of this AnsibleModule.  # noqa: E501

        connect as this user (default=None)  # noqa: E501

        :return: The user of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AnsibleModule.

        connect as this user (default=None)  # noqa: E501

        :param user: The user of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def vault_id(self):
        """Gets the vault_id of this AnsibleModule.  # noqa: E501

        the vault identity to use  # noqa: E501

        :return: The vault_id of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._vault_id

    @vault_id.setter
    def vault_id(self, vault_id):
        """Sets the vault_id of this AnsibleModule.

        the vault identity to use  # noqa: E501

        :param vault_id: The vault_id of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._vault_id = vault_id

    @property
    def vault_password_file(self):
        """Gets the vault_password_file of this AnsibleModule.  # noqa: E501

        vault password file  # noqa: E501

        :return: The vault_password_file of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._vault_password_file

    @vault_password_file.setter
    def vault_password_file(self, vault_password_file):
        """Sets the vault_password_file of this AnsibleModule.

        vault password file  # noqa: E501

        :param vault_password_file: The vault_password_file of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._vault_password_file = vault_password_file

    @property
    def verbose(self):
        """Gets the verbose of this AnsibleModule.  # noqa: E501

        verbose mode (-vvv for more, -vvvv to enable connection debugging)  # noqa: E501

        :return: The verbose of this AnsibleModule.  # noqa: E501
        :rtype: int
        """
        return self._verbose

    @verbose.setter
    def verbose(self, verbose):
        """Sets the verbose of this AnsibleModule.

        verbose mode (-vvv for more, -vvvv to enable connection debugging)  # noqa: E501

        :param verbose: The verbose of this AnsibleModule.  # noqa: E501
        :type: int
        """
        if verbose is not None and verbose > 4:  # noqa: E501
            raise ValueError("Invalid value for `verbose`, must be a value less than or equal to `4`")  # noqa: E501

        self._verbose = verbose

    @property
    def group(self):
        """Gets the group of this AnsibleModule.  # noqa: E501


        :return: The group of this AnsibleModule.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this AnsibleModule.


        :param group: The group of this AnsibleModule.  # noqa: E501
        :type: str
        """

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnsibleModule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnsibleModule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
