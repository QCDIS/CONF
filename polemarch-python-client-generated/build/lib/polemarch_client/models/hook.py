# coding: utf-8

"""
    Polemarch

     ### Polemarch is ansible based service for orchestration infrastructure.  * [Documentation](http://polemarch.readthedocs.io/) * [Issue Tracker](https://gitlab.com/vstconsulting/polemarch/issues) * [Source Code](https://gitlab.com/vstconsulting/polemarch)    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Hook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'type': 'str',
        'when': 'str',
        'enable': 'bool',
        'recipients': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'when': 'when',
        'enable': 'enable',
        'recipients': 'recipients'
    }

    def __init__(self, id=None, name=None, type=None, when=None, enable=None, recipients=None):  # noqa: E501
        """Hook - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._type = None
        self._when = None
        self._enable = None
        self._recipients = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        self.type = type
        if when is not None:
            self.when = when
        if enable is not None:
            self.enable = enable
        self.recipients = recipients

    @property
    def id(self):
        """Gets the id of this Hook.  # noqa: E501


        :return: The id of this Hook.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Hook.


        :param id: The id of this Hook.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Hook.  # noqa: E501


        :return: The name of this Hook.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Hook.


        :param name: The name of this Hook.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 512:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `512`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this Hook.  # noqa: E501


        :return: The type of this Hook.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Hook.


        :param type: The type of this Hook.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["HTTP", "SCRIPT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def when(self):
        """Gets the when of this Hook.  # noqa: E501


        :return: The when of this Hook.  # noqa: E501
        :rtype: str
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this Hook.


        :param when: The when of this Hook.  # noqa: E501
        :type: str
        """
        allowed_values = ["on_execution", "after_execution", "on_user_add", "on_user_upd", "on_user_del", "on_object_add", "on_object_upd", "on_object_del"]  # noqa: E501
        if when not in allowed_values:
            raise ValueError(
                "Invalid value for `when` ({0}), must be one of {1}"  # noqa: E501
                .format(when, allowed_values)
            )

        self._when = when

    @property
    def enable(self):
        """Gets the enable of this Hook.  # noqa: E501


        :return: The enable of this Hook.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this Hook.


        :param enable: The enable of this Hook.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def recipients(self):
        """Gets the recipients of this Hook.  # noqa: E501


        :return: The recipients of this Hook.  # noqa: E501
        :rtype: str
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this Hook.


        :param recipients: The recipients of this Hook.  # noqa: E501
        :type: str
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")  # noqa: E501
        if recipients is not None and len(recipients) < 1:
            raise ValueError("Invalid value for `recipients`, length must be greater than or equal to `1`")  # noqa: E501

        self._recipients = recipients

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Hook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Hook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
