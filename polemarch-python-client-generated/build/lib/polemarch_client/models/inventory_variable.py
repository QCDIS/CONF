# coding: utf-8

"""
    Polemarch

     ### Polemarch is ansible based service for orchestration infrastructure.  * [Documentation](http://polemarch.readthedocs.io/) * [Issue Tracker](https://gitlab.com/vstconsulting/polemarch/issues) * [Source Code](https://gitlab.com/vstconsulting/polemarch)    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InventoryVariable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'key': 'str',
        'value': 'str'
    }

    attribute_map = {
        'id': 'id',
        'key': 'key',
        'value': 'value'
    }

    def __init__(self, id=None, key=None, value=None):  # noqa: E501
        """InventoryVariable - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._key = None
        self._value = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.key = key
        self.value = value

    @property
    def id(self):
        """Gets the id of this InventoryVariable.  # noqa: E501


        :return: The id of this InventoryVariable.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InventoryVariable.


        :param id: The id of this InventoryVariable.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this InventoryVariable.  # noqa: E501


        :return: The key of this InventoryVariable.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this InventoryVariable.


        :param key: The key of this InventoryVariable.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501
        allowed_values = ["ansible_host", "ansible_port", "ansible_user", "ansible_connection", "ansible_ssh_pass", "ansible_ssh_private_key_file", "ansible_ssh_common_args", "ansible_sftp_extra_args", "ansible_scp_extra_args", "ansible_ssh_extra_args", "ansible_ssh_executable", "ansible_ssh_pipelining", "ansible_become", "ansible_become_method", "ansible_become_user", "ansible_become_pass", "ansible_become_exe", "ansible_become_flags", "ansible_shell_type", "ansible_python_interpreter", "ansible_ruby_interpreter", "ansible_perl_interpreter", "ansible_shell_executable"]  # noqa: E501
        if key not in allowed_values:
            raise ValueError(
                "Invalid value for `key` ({0}), must be one of {1}"  # noqa: E501
                .format(key, allowed_values)
            )

        self._key = key

    @property
    def value(self):
        """Gets the value of this InventoryVariable.  # noqa: E501


        :return: The value of this InventoryVariable.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InventoryVariable.


        :param value: The value of this InventoryVariable.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventoryVariable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryVariable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
