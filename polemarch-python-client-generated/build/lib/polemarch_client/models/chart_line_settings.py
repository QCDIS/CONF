# coding: utf-8

"""
    Polemarch

     ### Polemarch is ansible based service for orchestration infrastructure.  * [Documentation](http://polemarch.readthedocs.io/) * [Issue Tracker](https://gitlab.com/vstconsulting/polemarch/issues) * [Source Code](https://gitlab.com/vstconsulting/polemarch)    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChartLineSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_tasks': 'ChartLineSetting',
        'delay': 'ChartLineSetting',
        'ok': 'ChartLineSetting',
        'error': 'ChartLineSetting',
        'interrupted': 'ChartLineSetting',
        'offline': 'ChartLineSetting'
    }

    attribute_map = {
        'all_tasks': 'all_tasks',
        'delay': 'delay',
        'ok': 'ok',
        'error': 'error',
        'interrupted': 'interrupted',
        'offline': 'offline'
    }

    def __init__(self, all_tasks=None, delay=None, ok=None, error=None, interrupted=None, offline=None):  # noqa: E501
        """ChartLineSettings - a model defined in Swagger"""  # noqa: E501

        self._all_tasks = None
        self._delay = None
        self._ok = None
        self._error = None
        self._interrupted = None
        self._offline = None
        self.discriminator = None

        self.all_tasks = all_tasks
        self.delay = delay
        self.ok = ok
        self.error = error
        self.interrupted = interrupted
        self.offline = offline

    @property
    def all_tasks(self):
        """Gets the all_tasks of this ChartLineSettings.  # noqa: E501


        :return: The all_tasks of this ChartLineSettings.  # noqa: E501
        :rtype: ChartLineSetting
        """
        return self._all_tasks

    @all_tasks.setter
    def all_tasks(self, all_tasks):
        """Sets the all_tasks of this ChartLineSettings.


        :param all_tasks: The all_tasks of this ChartLineSettings.  # noqa: E501
        :type: ChartLineSetting
        """
        if all_tasks is None:
            raise ValueError("Invalid value for `all_tasks`, must not be `None`")  # noqa: E501

        self._all_tasks = all_tasks

    @property
    def delay(self):
        """Gets the delay of this ChartLineSettings.  # noqa: E501


        :return: The delay of this ChartLineSettings.  # noqa: E501
        :rtype: ChartLineSetting
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this ChartLineSettings.


        :param delay: The delay of this ChartLineSettings.  # noqa: E501
        :type: ChartLineSetting
        """
        if delay is None:
            raise ValueError("Invalid value for `delay`, must not be `None`")  # noqa: E501

        self._delay = delay

    @property
    def ok(self):
        """Gets the ok of this ChartLineSettings.  # noqa: E501


        :return: The ok of this ChartLineSettings.  # noqa: E501
        :rtype: ChartLineSetting
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this ChartLineSettings.


        :param ok: The ok of this ChartLineSettings.  # noqa: E501
        :type: ChartLineSetting
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")  # noqa: E501

        self._ok = ok

    @property
    def error(self):
        """Gets the error of this ChartLineSettings.  # noqa: E501


        :return: The error of this ChartLineSettings.  # noqa: E501
        :rtype: ChartLineSetting
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ChartLineSettings.


        :param error: The error of this ChartLineSettings.  # noqa: E501
        :type: ChartLineSetting
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def interrupted(self):
        """Gets the interrupted of this ChartLineSettings.  # noqa: E501


        :return: The interrupted of this ChartLineSettings.  # noqa: E501
        :rtype: ChartLineSetting
        """
        return self._interrupted

    @interrupted.setter
    def interrupted(self, interrupted):
        """Sets the interrupted of this ChartLineSettings.


        :param interrupted: The interrupted of this ChartLineSettings.  # noqa: E501
        :type: ChartLineSetting
        """
        if interrupted is None:
            raise ValueError("Invalid value for `interrupted`, must not be `None`")  # noqa: E501

        self._interrupted = interrupted

    @property
    def offline(self):
        """Gets the offline of this ChartLineSettings.  # noqa: E501


        :return: The offline of this ChartLineSettings.  # noqa: E501
        :rtype: ChartLineSetting
        """
        return self._offline

    @offline.setter
    def offline(self, offline):
        """Sets the offline of this ChartLineSettings.


        :param offline: The offline of this ChartLineSettings.  # noqa: E501
        :type: ChartLineSetting
        """
        if offline is None:
            raise ValueError("Invalid value for `offline`, must not be `None`")  # noqa: E501

        self._offline = offline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChartLineSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChartLineSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
