# coding: utf-8

"""
    Polemarch

     ### Polemarch is ansible based service for orchestration infrastructure.  * [Documentation](http://polemarch.readthedocs.io/) * [Issue Tracker](https://gitlab.com/vstconsulting/polemarch/issues) * [Source Code](https://gitlab.com/vstconsulting/polemarch)    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChangePassword(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'old_password': 'str',
        'password': 'str',
        'password2': 'str'
    }

    attribute_map = {
        'old_password': 'old_password',
        'password': 'password',
        'password2': 'password2'
    }

    def __init__(self, old_password=None, password=None, password2=None):  # noqa: E501
        """ChangePassword - a model defined in Swagger"""  # noqa: E501

        self._old_password = None
        self._password = None
        self._password2 = None
        self.discriminator = None

        self.old_password = old_password
        self.password = password
        self.password2 = password2

    @property
    def old_password(self):
        """Gets the old_password of this ChangePassword.  # noqa: E501


        :return: The old_password of this ChangePassword.  # noqa: E501
        :rtype: str
        """
        return self._old_password

    @old_password.setter
    def old_password(self, old_password):
        """Sets the old_password of this ChangePassword.


        :param old_password: The old_password of this ChangePassword.  # noqa: E501
        :type: str
        """
        if old_password is None:
            raise ValueError("Invalid value for `old_password`, must not be `None`")  # noqa: E501
        if old_password is not None and len(old_password) < 1:
            raise ValueError("Invalid value for `old_password`, length must be greater than or equal to `1`")  # noqa: E501

        self._old_password = old_password

    @property
    def password(self):
        """Gets the password of this ChangePassword.  # noqa: E501


        :return: The password of this ChangePassword.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ChangePassword.


        :param password: The password of this ChangePassword.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")  # noqa: E501

        self._password = password

    @property
    def password2(self):
        """Gets the password2 of this ChangePassword.  # noqa: E501


        :return: The password2 of this ChangePassword.  # noqa: E501
        :rtype: str
        """
        return self._password2

    @password2.setter
    def password2(self, password2):
        """Sets the password2 of this ChangePassword.


        :param password2: The password2 of this ChangePassword.  # noqa: E501
        :type: str
        """
        if password2 is None:
            raise ValueError("Invalid value for `password2`, must not be `None`")  # noqa: E501
        if password2 is not None and len(password2) < 1:
            raise ValueError("Invalid value for `password2`, length must be greater than or equal to `1`")  # noqa: E501

        self._password2 = password2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangePassword, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangePassword):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
