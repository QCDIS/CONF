# coding: utf-8

"""
    Polemarch

     ### Polemarch is ansible based service for orchestration infrastructure.  * [Documentation](http://polemarch.readthedocs.io/) * [Issue Tracker](https://gitlab.com/vstconsulting/polemarch/issues) * [Source Code](https://gitlab.com/vstconsulting/polemarch)    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lang': 'str',
        'autoupdate_interval': 'int',
        'chart_line_settings': 'ChartLineSettings',
        'widget_settings': 'WidgetSettings',
        'selected_skin': 'str',
        'skins_settings': 'Data'
    }

    attribute_map = {
        'lang': 'lang',
        'autoupdate_interval': 'autoupdateInterval',
        'chart_line_settings': 'chartLineSettings',
        'widget_settings': 'widgetSettings',
        'selected_skin': 'selectedSkin',
        'skins_settings': 'skinsSettings'
    }

    def __init__(self, lang='en', autoupdate_interval=None, chart_line_settings=None, widget_settings=None, selected_skin=None, skins_settings=None):  # noqa: E501
        """UserSettings - a model defined in Swagger"""  # noqa: E501

        self._lang = None
        self._autoupdate_interval = None
        self._chart_line_settings = None
        self._widget_settings = None
        self._selected_skin = None
        self._skins_settings = None
        self.discriminator = None

        if lang is not None:
            self.lang = lang
        if autoupdate_interval is not None:
            self.autoupdate_interval = autoupdate_interval
        self.chart_line_settings = chart_line_settings
        self.widget_settings = widget_settings
        if selected_skin is not None:
            self.selected_skin = selected_skin
        if skins_settings is not None:
            self.skins_settings = skins_settings

    @property
    def lang(self):
        """Gets the lang of this UserSettings.  # noqa: E501


        :return: The lang of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this UserSettings.


        :param lang: The lang of this UserSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["en", "ru"]  # noqa: E501
        if lang not in allowed_values:
            raise ValueError(
                "Invalid value for `lang` ({0}), must be one of {1}"  # noqa: E501
                .format(lang, allowed_values)
            )

        self._lang = lang

    @property
    def autoupdate_interval(self):
        """Gets the autoupdate_interval of this UserSettings.  # noqa: E501


        :return: The autoupdate_interval of this UserSettings.  # noqa: E501
        :rtype: int
        """
        return self._autoupdate_interval

    @autoupdate_interval.setter
    def autoupdate_interval(self, autoupdate_interval):
        """Sets the autoupdate_interval of this UserSettings.


        :param autoupdate_interval: The autoupdate_interval of this UserSettings.  # noqa: E501
        :type: int
        """

        self._autoupdate_interval = autoupdate_interval

    @property
    def chart_line_settings(self):
        """Gets the chart_line_settings of this UserSettings.  # noqa: E501


        :return: The chart_line_settings of this UserSettings.  # noqa: E501
        :rtype: ChartLineSettings
        """
        return self._chart_line_settings

    @chart_line_settings.setter
    def chart_line_settings(self, chart_line_settings):
        """Sets the chart_line_settings of this UserSettings.


        :param chart_line_settings: The chart_line_settings of this UserSettings.  # noqa: E501
        :type: ChartLineSettings
        """
        if chart_line_settings is None:
            raise ValueError("Invalid value for `chart_line_settings`, must not be `None`")  # noqa: E501

        self._chart_line_settings = chart_line_settings

    @property
    def widget_settings(self):
        """Gets the widget_settings of this UserSettings.  # noqa: E501


        :return: The widget_settings of this UserSettings.  # noqa: E501
        :rtype: WidgetSettings
        """
        return self._widget_settings

    @widget_settings.setter
    def widget_settings(self, widget_settings):
        """Sets the widget_settings of this UserSettings.


        :param widget_settings: The widget_settings of this UserSettings.  # noqa: E501
        :type: WidgetSettings
        """
        if widget_settings is None:
            raise ValueError("Invalid value for `widget_settings`, must not be `None`")  # noqa: E501

        self._widget_settings = widget_settings

    @property
    def selected_skin(self):
        """Gets the selected_skin of this UserSettings.  # noqa: E501


        :return: The selected_skin of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._selected_skin

    @selected_skin.setter
    def selected_skin(self, selected_skin):
        """Sets the selected_skin of this UserSettings.


        :param selected_skin: The selected_skin of this UserSettings.  # noqa: E501
        :type: str
        """
        if selected_skin is not None and len(selected_skin) < 1:
            raise ValueError("Invalid value for `selected_skin`, length must be greater than or equal to `1`")  # noqa: E501

        self._selected_skin = selected_skin

    @property
    def skins_settings(self):
        """Gets the skins_settings of this UserSettings.  # noqa: E501


        :return: The skins_settings of this UserSettings.  # noqa: E501
        :rtype: Data
        """
        return self._skins_settings

    @skins_settings.setter
    def skins_settings(self, skins_settings):
        """Sets the skins_settings of this UserSettings.


        :param skins_settings: The skins_settings of this UserSettings.  # noqa: E501
        :type: Data
        """

        self._skins_settings = skins_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
