# coding: utf-8

"""
    Polemarch

     ### Polemarch is ansible based service for orchestration infrastructure.  * [Documentation](http://polemarch.readthedocs.io/) * [Issue Tracker](https://gitlab.com/vstconsulting/polemarch/issues) * [Source Code](https://gitlab.com/vstconsulting/polemarch)    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from polemarch_client.api_client import ApiClient


class ProjectApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def project_add(self, data, **kwargs):  # noqa: E501
        """project_add  # noqa: E501

        Create a new project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_add(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectCreateMaster data: (required)
        :return: ProjectCreateMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_add_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_add_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def project_add_with_http_info(self, data, **kwargs):  # noqa: E501
        """project_add  # noqa: E501

        Create a new project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_add_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectCreateMaster data: (required)
        :return: ProjectCreateMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectCreateMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_copy(self, id, data, **kwargs):  # noqa: E501
        """project_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_copy(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param Project data: (required)
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_copy_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_copy_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def project_copy_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """project_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_copy_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param Project data: (required)
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_copy`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_copy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/copy/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_edit(self, id, data, **kwargs):  # noqa: E501
        """project_edit  # noqa: E501

        Update one or more fields on an existing project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_edit(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param OneProject data: (required)
        :return: OneProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_edit_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_edit_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def project_edit_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """project_edit  # noqa: E501

        Update one or more fields on an existing project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_edit_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param OneProject data: (required)
        :return: OneProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_execute_module(self, id, data, **kwargs):  # noqa: E501
        """project_execute_module  # noqa: E501

        Execute `ansible -m [module]` with arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_execute_module(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param AnsibleModule data: (required)
        :return: ExecuteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_execute_module_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_execute_module_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def project_execute_module_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """project_execute_module  # noqa: E501

        Execute `ansible -m [module]` with arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_execute_module_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param AnsibleModule data: (required)
        :return: ExecuteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_execute_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_execute_module`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_execute_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/execute_module/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExecuteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_execute_playbook(self, id, data, **kwargs):  # noqa: E501
        """project_execute_playbook  # noqa: E501

        Execute `ansible-playbook` with arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_execute_playbook(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param AnsiblePlaybook data: (required)
        :return: ExecuteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_execute_playbook_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_execute_playbook_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def project_execute_playbook_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """project_execute_playbook  # noqa: E501

        Execute `ansible-playbook` with arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_execute_playbook_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param AnsiblePlaybook data: (required)
        :return: ExecuteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_execute_playbook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_execute_playbook`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_execute_playbook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/execute_playbook/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExecuteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_get(self, id, **kwargs):  # noqa: E501
        """project_get  # noqa: E501

        Return a project instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :return: OneProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def project_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """project_get  # noqa: E501

        Return a project instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :return: OneProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_history_cancel(self, history_id, id, data, **kwargs):  # noqa: E501
        """project_history_cancel  # noqa: E501

        Cencel working task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_history_cancel(history_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int history_id: A unique integer value identifying instance of this history sublist. (required)
        :param int id: A unique integer value identifying this project. (required)
        :param Empty data: (required)
        :return: ActionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_history_cancel_with_http_info(history_id, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_history_cancel_with_http_info(history_id, id, data, **kwargs)  # noqa: E501
            return data

    def project_history_cancel_with_http_info(self, history_id, id, data, **kwargs):  # noqa: E501
        """project_history_cancel  # noqa: E501

        Cencel working task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_history_cancel_with_http_info(history_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int history_id: A unique integer value identifying instance of this history sublist. (required)
        :param int id: A unique integer value identifying this project. (required)
        :param Empty data: (required)
        :return: ActionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_id', 'id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_history_cancel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `project_history_cancel`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_history_cancel`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_history_cancel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['history_id'] = params['history_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/history/{history_id}/cancel/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_history_clear(self, history_id, id, **kwargs):  # noqa: E501
        """project_history_clear  # noqa: E501

        Clear history output.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_history_clear(history_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int history_id: A unique integer value identifying instance of this history sublist. (required)
        :param int id: A unique integer value identifying this project. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_history_clear_with_http_info(history_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_history_clear_with_http_info(history_id, id, **kwargs)  # noqa: E501
            return data

    def project_history_clear_with_http_info(self, history_id, id, **kwargs):  # noqa: E501
        """project_history_clear  # noqa: E501

        Clear history output.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_history_clear_with_http_info(history_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int history_id: A unique integer value identifying instance of this history sublist. (required)
        :param int id: A unique integer value identifying this project. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_history_clear" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `project_history_clear`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_history_clear`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['history_id'] = params['history_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/history/{history_id}/clear/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_history_facts(self, history_id, id, **kwargs):  # noqa: E501
        """project_history_facts  # noqa: E501

        Get compilated history facts (only for execution 'module' with module 'setup').  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_history_facts(history_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int history_id: A unique integer value identifying instance of this history sublist. (required)
        :param int id: A unique integer value identifying this project. (required)
        :return: Data
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_history_facts_with_http_info(history_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_history_facts_with_http_info(history_id, id, **kwargs)  # noqa: E501
            return data

    def project_history_facts_with_http_info(self, history_id, id, **kwargs):  # noqa: E501
        """project_history_facts  # noqa: E501

        Get compilated history facts (only for execution 'module' with module 'setup').  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_history_facts_with_http_info(history_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int history_id: A unique integer value identifying instance of this history sublist. (required)
        :param int id: A unique integer value identifying this project. (required)
        :return: Data
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_history_facts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `project_history_facts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_history_facts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['history_id'] = params['history_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/history/{history_id}/facts/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Data',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_history_get(self, history_id, id, **kwargs):  # noqa: E501
        """project_history_get  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_history_get(history_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int history_id: A unique integer value identifying instance of this history sublist. (required)
        :param int id: A unique integer value identifying this project. (required)
        :return: OneHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_history_get_with_http_info(history_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_history_get_with_http_info(history_id, id, **kwargs)  # noqa: E501
            return data

    def project_history_get_with_http_info(self, history_id, id, **kwargs):  # noqa: E501
        """project_history_get  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_history_get_with_http_info(history_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int history_id: A unique integer value identifying instance of this history sublist. (required)
        :param int id: A unique integer value identifying this project. (required)
        :return: OneHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `project_history_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['history_id'] = params['history_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/history/{history_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_history_list(self, id, **kwargs):  # noqa: E501
        """project_history_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_history_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str mode: Module or playbook name.
        :param str kind: Kind of execution.
        :param str status: Status of execution.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str older: Older then this time
        :param str newer: Newer then this time
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_history_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_history_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def project_history_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """project_history_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_history_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str mode: Module or playbook name.
        :param str kind: Kind of execution.
        :param str status: Status of execution.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str older: Older then this time
        :param str newer: Newer then this time
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'mode', 'kind', 'status', 'id__not', 'name__not', 'name', 'older', 'newer', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_history_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_history_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'kind' in params:
            query_params.append(('kind', params['kind']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'name__not' in params:
            query_params.append(('name__not', params['name__not']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'older' in params:
            query_params.append(('older', params['older']))  # noqa: E501
        if 'newer' in params:
            query_params.append(('newer', params['newer']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/history/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_history_remove(self, history_id, id, **kwargs):  # noqa: E501
        """project_history_remove  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_history_remove(history_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int history_id: A unique integer value identifying instance of this history sublist. (required)
        :param int id: A unique integer value identifying this project. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_history_remove_with_http_info(history_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_history_remove_with_http_info(history_id, id, **kwargs)  # noqa: E501
            return data

    def project_history_remove_with_http_info(self, history_id, id, **kwargs):  # noqa: E501
        """project_history_remove  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_history_remove_with_http_info(history_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int history_id: A unique integer value identifying instance of this history sublist. (required)
        :param int id: A unique integer value identifying this project. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_history_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `project_history_remove`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_history_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['history_id'] = params['history_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/history/{history_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_add(self, id, data, **kwargs):  # noqa: E501
        """project_inventory_add  # noqa: E501

        Create a new inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_add(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param OneInventory data: (required)
        :return: OneInventory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_add_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_add_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_add_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """project_inventory_add  # noqa: E501

        Create a new inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_add_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param OneInventory data: (required)
        :return: OneInventory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneInventory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_all_groups_get(self, all_groups_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_all_groups_get  # noqa: E501

        Return a group instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_all_groups_get(all_groups_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str all_groups_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_all_groups_get_with_http_info(all_groups_id, id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_all_groups_get_with_http_info(all_groups_id, id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_all_groups_get_with_http_info(self, all_groups_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_all_groups_get  # noqa: E501

        Return a group instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_all_groups_get_with_http_info(all_groups_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str all_groups_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['all_groups_id', 'id', 'inventory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_all_groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'all_groups_id' is set
        if ('all_groups_id' not in params or
                params['all_groups_id'] is None):
            raise ValueError("Missing the required parameter `all_groups_id` when calling `project_inventory_all_groups_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_all_groups_get`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_all_groups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'all_groups_id' in params:
            path_params['all_groups_id'] = params['all_groups_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/all_groups/{all_groups_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_all_groups_list(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_all_groups_list  # noqa: E501

        Return all groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_all_groups_list(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_all_groups_list_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_all_groups_list_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_all_groups_list_with_http_info(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_all_groups_list  # noqa: E501

        Return all groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_all_groups_list_with_http_info(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'id2', 'name', 'id__not', 'name__not', 'variables', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_all_groups_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_all_groups_list`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_all_groups_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'name__not' in params:
            query_params.append(('name__not', params['name__not']))  # noqa: E501
        if 'variables' in params:
            query_params.append(('variables', params['variables']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/all_groups/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_all_hosts_get(self, all_hosts_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_all_hosts_get  # noqa: E501

        Return a host instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_all_hosts_get(all_hosts_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str all_hosts_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_all_hosts_get_with_http_info(all_hosts_id, id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_all_hosts_get_with_http_info(all_hosts_id, id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_all_hosts_get_with_http_info(self, all_hosts_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_all_hosts_get  # noqa: E501

        Return a host instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_all_hosts_get_with_http_info(all_hosts_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str all_hosts_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['all_hosts_id', 'id', 'inventory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_all_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'all_hosts_id' is set
        if ('all_hosts_id' not in params or
                params['all_hosts_id'] is None):
            raise ValueError("Missing the required parameter `all_hosts_id` when calling `project_inventory_all_hosts_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_all_hosts_get`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_all_hosts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'all_hosts_id' in params:
            path_params['all_hosts_id'] = params['all_hosts_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/all_hosts/{all_hosts_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_all_hosts_list(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_all_hosts_list  # noqa: E501

        Return all hosts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_all_hosts_list(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str type: Instance type.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_all_hosts_list_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_all_hosts_list_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_all_hosts_list_with_http_info(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_all_hosts_list  # noqa: E501

        Return all hosts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_all_hosts_list_with_http_info(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str type: Instance type.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'id2', 'name', 'type', 'id__not', 'name__not', 'variables', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_all_hosts_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_all_hosts_list`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_all_hosts_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'name__not' in params:
            query_params.append(('name__not', params['name__not']))  # noqa: E501
        if 'variables' in params:
            query_params.append(('variables', params['variables']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/all_hosts/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_copy(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_copy(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param Inventory data: (required)
        :return: Inventory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_copy_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_copy_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_copy_with_http_info(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_copy_with_http_info(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param Inventory data: (required)
        :return: Inventory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_copy`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_copy`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_copy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/copy/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Inventory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_edit(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_edit  # noqa: E501

        Update one or more fields on an existing inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_edit(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneInventory data: (required)
        :return: OneInventory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_edit_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_edit_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_edit_with_http_info(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_edit  # noqa: E501

        Update one or more fields on an existing inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_edit_with_http_info(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneInventory data: (required)
        :return: OneInventory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_edit`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneInventory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_get(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_get  # noqa: E501

        Return a inventory instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_get(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: OneInventory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_get_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_get_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_get_with_http_info(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_get  # noqa: E501

        Return a inventory instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_get_with_http_info(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: OneInventory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_get`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneInventory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_add(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_add  # noqa: E501

        Create a new group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_add(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param GroupCreateMaster data: (required)
        :return: GroupCreateMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_add_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_add_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_add_with_http_info(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_add  # noqa: E501

        Create a new group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_add_with_http_info(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param GroupCreateMaster data: (required)
        :return: GroupCreateMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_add`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_group_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupCreateMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_edit(self, group_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_edit  # noqa: E501

        Update one or more fields on an existing group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_edit(group_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneGroup data: (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_edit_with_http_info(group_id, id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_edit_with_http_info(group_id, id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_edit_with_http_info(self, group_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_edit  # noqa: E501

        Update one or more fields on an existing group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_edit_with_http_info(group_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneGroup data: (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `project_inventory_group_edit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_edit`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_group_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/{group_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_get(self, group_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_group_get  # noqa: E501

        Return a group instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_get(group_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_get_with_http_info(group_id, id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_get_with_http_info(group_id, id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_get_with_http_info(self, group_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_group_get  # noqa: E501

        Return a group instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_get_with_http_info(group_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'inventory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `project_inventory_group_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_get`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/{group_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_inventory_copy(self, group_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_inventory_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_inventory_copy(group_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param Group data: (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_inventory_copy_with_http_info(group_id, id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_inventory_copy_with_http_info(group_id, id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_inventory_copy_with_http_info(self, group_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_inventory_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_inventory_copy_with_http_info(group_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param Group data: (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_inventory_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `project_inventory_group_inventory_copy`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_inventory_copy`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_inventory_copy`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_group_inventory_copy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/{group_id}/copy/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_inventory_set_owner(self, group_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_inventory_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_inventory_set_owner(group_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_inventory_set_owner_with_http_info(group_id, id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_inventory_set_owner_with_http_info(group_id, id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_inventory_set_owner_with_http_info(self, group_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_inventory_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_inventory_set_owner_with_http_info(group_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_inventory_set_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `project_inventory_group_inventory_set_owner`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_inventory_set_owner`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_inventory_set_owner`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_group_inventory_set_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/{group_id}/set_owner/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetOwner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_list(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_group_list  # noqa: E501

        Return all groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_list(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_list_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_list_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_list_with_http_info(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_group_list  # noqa: E501

        Return all groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_list_with_http_info(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'id2', 'name', 'id__not', 'name__not', 'variables', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_list`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'name__not' in params:
            query_params.append(('name__not', params['name__not']))  # noqa: E501
        if 'variables' in params:
            query_params.append(('variables', params['variables']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_remove(self, group_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_group_remove  # noqa: E501

        Remove an existing group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_remove(group_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_remove_with_http_info(group_id, id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_remove_with_http_info(group_id, id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_remove_with_http_info(self, group_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_group_remove  # noqa: E501

        Remove an existing group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_remove_with_http_info(group_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'inventory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `project_inventory_group_remove`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_remove`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/{group_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_update(self, group_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_update  # noqa: E501

        Update a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_update(group_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneGroup data: (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_update_with_http_info(group_id, id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_update_with_http_info(group_id, id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_update_with_http_info(self, group_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_update  # noqa: E501

        Update a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_update_with_http_info(group_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneGroup data: (required)
        :return: OneGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `project_inventory_group_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_update`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_group_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/{group_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_variables_add(self, group_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_variables_add(group_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_variables_add_with_http_info(group_id, id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_variables_add_with_http_info(group_id, id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_variables_add_with_http_info(self, group_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_variables_add_with_http_info(group_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_variables_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `project_inventory_group_variables_add`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_variables_add`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_variables_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_group_variables_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/{group_id}/variables/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_variables_edit(self, group_id, id, inventory_id, variables_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_variables_edit(group_id, id, inventory_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_variables_edit_with_http_info(group_id, id, inventory_id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_variables_edit_with_http_info(group_id, id, inventory_id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_variables_edit_with_http_info(self, group_id, id, inventory_id, variables_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_variables_edit_with_http_info(group_id, id, inventory_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'inventory_id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_variables_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `project_inventory_group_variables_edit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_variables_edit`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_variables_edit`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_inventory_group_variables_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_group_variables_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/{group_id}/variables/{variables_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_variables_get(self, group_id, id, inventory_id, variables_id, **kwargs):  # noqa: E501
        """project_inventory_group_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_variables_get(group_id, id, inventory_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_variables_get_with_http_info(group_id, id, inventory_id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_variables_get_with_http_info(group_id, id, inventory_id, variables_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_variables_get_with_http_info(self, group_id, id, inventory_id, variables_id, **kwargs):  # noqa: E501
        """project_inventory_group_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_variables_get_with_http_info(group_id, id, inventory_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'inventory_id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_variables_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `project_inventory_group_variables_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_variables_get`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_variables_get`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_inventory_group_variables_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/{group_id}/variables/{variables_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_variables_list(self, group_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_group_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_variables_list(group_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_variables_list_with_http_info(group_id, id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_variables_list_with_http_info(group_id, id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_variables_list_with_http_info(self, group_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_group_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_variables_list_with_http_info(group_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'inventory_id', 'id2', 'key', 'value', 'id__not', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_variables_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `project_inventory_group_variables_list`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_variables_list`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_variables_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/{group_id}/variables/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_variables_remove(self, group_id, id, inventory_id, variables_id, **kwargs):  # noqa: E501
        """project_inventory_group_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_variables_remove(group_id, id, inventory_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_variables_remove_with_http_info(group_id, id, inventory_id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_variables_remove_with_http_info(group_id, id, inventory_id, variables_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_variables_remove_with_http_info(self, group_id, id, inventory_id, variables_id, **kwargs):  # noqa: E501
        """project_inventory_group_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_variables_remove_with_http_info(group_id, id, inventory_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'inventory_id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_variables_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `project_inventory_group_variables_remove`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_variables_remove`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_variables_remove`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_inventory_group_variables_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/{group_id}/variables/{variables_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_group_variables_update(self, group_id, id, inventory_id, variables_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_variables_update(group_id, id, inventory_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_group_variables_update_with_http_info(group_id, id, inventory_id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_group_variables_update_with_http_info(group_id, id, inventory_id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_group_variables_update_with_http_info(self, group_id, id, inventory_id, variables_id, data, **kwargs):  # noqa: E501
        """project_inventory_group_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_group_variables_update_with_http_info(group_id, id, inventory_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'inventory_id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_group_variables_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `project_inventory_group_variables_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_group_variables_update`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_group_variables_update`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_inventory_group_variables_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_group_variables_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/group/{group_id}/variables/{variables_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_add(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_add  # noqa: E501

        Create a new host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_add(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneHost data: (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_add_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_add_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_add_with_http_info(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_add  # noqa: E501

        Create a new host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_add_with_http_info(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneHost data: (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_add`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_host_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_edit(self, host_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_edit  # noqa: E501

        Update one or more fields on an existing host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_edit(host_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneHost data: (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_edit_with_http_info(host_id, id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_edit_with_http_info(host_id, id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_edit_with_http_info(self, host_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_edit  # noqa: E501

        Update one or more fields on an existing host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_edit_with_http_info(host_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneHost data: (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `project_inventory_host_edit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_edit`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_host_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/{host_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_get(self, host_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_host_get  # noqa: E501

        Return a host instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_get(host_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_get_with_http_info(host_id, id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_get_with_http_info(host_id, id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_get_with_http_info(self, host_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_host_get  # noqa: E501

        Return a host instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_get_with_http_info(host_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'inventory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `project_inventory_host_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_get`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/{host_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_inventory_copy(self, host_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_inventory_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_inventory_copy(host_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param Host data: (required)
        :return: Host
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_inventory_copy_with_http_info(host_id, id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_inventory_copy_with_http_info(host_id, id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_inventory_copy_with_http_info(self, host_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_inventory_copy  # noqa: E501

        Endpoint which copy instance with deps.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_inventory_copy_with_http_info(host_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param Host data: (required)
        :return: Host
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_inventory_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `project_inventory_host_inventory_copy`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_inventory_copy`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_inventory_copy`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_host_inventory_copy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/{host_id}/copy/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Host',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_inventory_set_owner(self, host_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_inventory_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_inventory_set_owner(host_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_inventory_set_owner_with_http_info(host_id, id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_inventory_set_owner_with_http_info(host_id, id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_inventory_set_owner_with_http_info(self, host_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_inventory_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_inventory_set_owner_with_http_info(host_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_inventory_set_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `project_inventory_host_inventory_set_owner`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_inventory_set_owner`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_inventory_set_owner`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_host_inventory_set_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/{host_id}/set_owner/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetOwner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_list(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_host_list  # noqa: E501

        Return all hosts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_list(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str type: Instance type.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_list_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_list_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_list_with_http_info(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_host_list  # noqa: E501

        Return all hosts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_list_with_http_info(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str type: Instance type.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'id2', 'name', 'type', 'id__not', 'name__not', 'variables', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_list`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'name__not' in params:
            query_params.append(('name__not', params['name__not']))  # noqa: E501
        if 'variables' in params:
            query_params.append(('variables', params['variables']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_remove(self, host_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_host_remove  # noqa: E501

        Remove an existing host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_remove(host_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_remove_with_http_info(host_id, id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_remove_with_http_info(host_id, id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_remove_with_http_info(self, host_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_host_remove  # noqa: E501

        Remove an existing host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_remove_with_http_info(host_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'inventory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `project_inventory_host_remove`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_remove`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/{host_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_update(self, host_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_update  # noqa: E501

        Update a host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_update(host_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneHost data: (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_update_with_http_info(host_id, id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_update_with_http_info(host_id, id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_update_with_http_info(self, host_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_update  # noqa: E501

        Update a host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_update_with_http_info(host_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneHost data: (required)
        :return: OneHost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `project_inventory_host_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_update`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_host_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/{host_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_variables_add(self, host_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_variables_add(host_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_variables_add_with_http_info(host_id, id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_variables_add_with_http_info(host_id, id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_variables_add_with_http_info(self, host_id, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_variables_add_with_http_info(host_id, id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_variables_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `project_inventory_host_variables_add`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_variables_add`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_variables_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_host_variables_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/{host_id}/variables/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_variables_edit(self, host_id, id, inventory_id, variables_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_variables_edit(host_id, id, inventory_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_variables_edit_with_http_info(host_id, id, inventory_id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_variables_edit_with_http_info(host_id, id, inventory_id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_variables_edit_with_http_info(self, host_id, id, inventory_id, variables_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_variables_edit_with_http_info(host_id, id, inventory_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'inventory_id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_variables_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `project_inventory_host_variables_edit`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_variables_edit`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_variables_edit`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_inventory_host_variables_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_host_variables_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/{host_id}/variables/{variables_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_variables_get(self, host_id, id, inventory_id, variables_id, **kwargs):  # noqa: E501
        """project_inventory_host_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_variables_get(host_id, id, inventory_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_variables_get_with_http_info(host_id, id, inventory_id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_variables_get_with_http_info(host_id, id, inventory_id, variables_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_variables_get_with_http_info(self, host_id, id, inventory_id, variables_id, **kwargs):  # noqa: E501
        """project_inventory_host_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_variables_get_with_http_info(host_id, id, inventory_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'inventory_id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_variables_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `project_inventory_host_variables_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_variables_get`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_variables_get`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_inventory_host_variables_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/{host_id}/variables/{variables_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_variables_list(self, host_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_host_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_variables_list(host_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_variables_list_with_http_info(host_id, id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_variables_list_with_http_info(host_id, id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_variables_list_with_http_info(self, host_id, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_host_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_variables_list_with_http_info(host_id, id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'inventory_id', 'id2', 'key', 'value', 'id__not', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_variables_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `project_inventory_host_variables_list`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_variables_list`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_variables_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/{host_id}/variables/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_variables_remove(self, host_id, id, inventory_id, variables_id, **kwargs):  # noqa: E501
        """project_inventory_host_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_variables_remove(host_id, id, inventory_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_variables_remove_with_http_info(host_id, id, inventory_id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_variables_remove_with_http_info(host_id, id, inventory_id, variables_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_variables_remove_with_http_info(self, host_id, id, inventory_id, variables_id, **kwargs):  # noqa: E501
        """project_inventory_host_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_variables_remove_with_http_info(host_id, id, inventory_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'inventory_id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_variables_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `project_inventory_host_variables_remove`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_variables_remove`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_variables_remove`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_inventory_host_variables_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/{host_id}/variables/{variables_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_host_variables_update(self, host_id, id, inventory_id, variables_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_variables_update(host_id, id, inventory_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_host_variables_update_with_http_info(host_id, id, inventory_id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_host_variables_update_with_http_info(host_id, id, inventory_id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_host_variables_update_with_http_info(self, host_id, id, inventory_id, variables_id, data, **kwargs):  # noqa: E501
        """project_inventory_host_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_host_variables_update_with_http_info(host_id, id, inventory_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: (required)
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_id', 'id', 'inventory_id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_host_variables_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_id' is set
        if ('host_id' not in params or
                params['host_id'] is None):
            raise ValueError("Missing the required parameter `host_id` when calling `project_inventory_host_variables_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_host_variables_update`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_host_variables_update`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_inventory_host_variables_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_host_variables_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/host/{host_id}/variables/{variables_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_import_inventory(self, id, data, **kwargs):  # noqa: E501
        """project_inventory_import_inventory  # noqa: E501

        Create a new inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_import_inventory(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param InventoryImport data: (required)
        :return: InventoryImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_import_inventory_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_import_inventory_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_import_inventory_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """project_inventory_import_inventory  # noqa: E501

        Create a new inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_import_inventory_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param InventoryImport data: (required)
        :return: InventoryImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_import_inventory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_import_inventory`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_import_inventory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/import_inventory/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryImport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_list(self, id, **kwargs):  # noqa: E501
        """project_inventory_list  # noqa: E501

        Return all inventories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def project_inventory_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """project_inventory_list  # noqa: E501

        Return all inventories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'name', 'id__not', 'name__not', 'variables', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'name__not' in params:
            query_params.append(('name__not', params['name__not']))  # noqa: E501
        if 'variables' in params:
            query_params.append(('variables', params['variables']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_remove(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_remove  # noqa: E501

        Remove an existing inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_remove(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_remove_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_remove_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_remove_with_http_info(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_remove  # noqa: E501

        Remove an existing inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_remove_with_http_info(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_remove`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_set_owner(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_set_owner(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_set_owner_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_set_owner_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_set_owner_with_http_info(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_set_owner_with_http_info(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_set_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_set_owner`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_set_owner`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_set_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/set_owner/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetOwner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_update(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_update  # noqa: E501

        Update a inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_update(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneInventory data: (required)
        :return: OneInventory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_update_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_update_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_update_with_http_info(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_update  # noqa: E501

        Update a inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_update_with_http_info(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param OneInventory data: (required)
        :return: OneInventory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_update`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneInventory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_variables_add(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_variables_add(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_variables_add_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_variables_add_with_http_info(id, inventory_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_variables_add_with_http_info(self, id, inventory_id, data, **kwargs):  # noqa: E501
        """project_inventory_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_variables_add_with_http_info(id, inventory_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_variables_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_variables_add`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_variables_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_variables_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/variables/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_variables_edit(self, id, inventory_id, variables_id, data, **kwargs):  # noqa: E501
        """project_inventory_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_variables_edit(id, inventory_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_variables_edit_with_http_info(id, inventory_id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_variables_edit_with_http_info(id, inventory_id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_variables_edit_with_http_info(self, id, inventory_id, variables_id, data, **kwargs):  # noqa: E501
        """project_inventory_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_variables_edit_with_http_info(id, inventory_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_variables_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_variables_edit`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_variables_edit`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_inventory_variables_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_variables_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/variables/{variables_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_variables_get(self, id, inventory_id, variables_id, **kwargs):  # noqa: E501
        """project_inventory_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_variables_get(id, inventory_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_variables_get_with_http_info(id, inventory_id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_variables_get_with_http_info(id, inventory_id, variables_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_variables_get_with_http_info(self, id, inventory_id, variables_id, **kwargs):  # noqa: E501
        """project_inventory_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_variables_get_with_http_info(id, inventory_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_variables_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_variables_get`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_variables_get`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_inventory_variables_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/variables/{variables_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_variables_list(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_variables_list(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_variables_list_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_variables_list_with_http_info(id, inventory_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_variables_list_with_http_info(self, id, inventory_id, **kwargs):  # noqa: E501
        """project_inventory_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_variables_list_with_http_info(id, inventory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'id2', 'key', 'value', 'id__not', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_variables_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_variables_list`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_variables_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/variables/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_variables_remove(self, id, inventory_id, variables_id, **kwargs):  # noqa: E501
        """project_inventory_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_variables_remove(id, inventory_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_variables_remove_with_http_info(id, inventory_id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_variables_remove_with_http_info(id, inventory_id, variables_id, **kwargs)  # noqa: E501
            return data

    def project_inventory_variables_remove_with_http_info(self, id, inventory_id, variables_id, **kwargs):  # noqa: E501
        """project_inventory_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_variables_remove_with_http_info(id, inventory_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_variables_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_variables_remove`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_variables_remove`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_inventory_variables_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/variables/{variables_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_inventory_variables_update(self, id, inventory_id, variables_id, data, **kwargs):  # noqa: E501
        """project_inventory_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_variables_update(id, inventory_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_inventory_variables_update_with_http_info(id, inventory_id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_inventory_variables_update_with_http_info(id, inventory_id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def project_inventory_variables_update_with_http_info(self, id, inventory_id, variables_id, data, **kwargs):  # noqa: E501
        """project_inventory_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_inventory_variables_update_with_http_info(id, inventory_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int inventory_id: A unique integer value identifying instance of this inventories sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param InventoryVariable data: (required)
        :return: InventoryVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'inventory_id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_inventory_variables_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_inventory_variables_update`")  # noqa: E501
        # verify the required parameter 'inventory_id' is set
        if ('inventory_id' not in params or
                params['inventory_id'] is None):
            raise ValueError("Missing the required parameter `inventory_id` when calling `project_inventory_variables_update`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_inventory_variables_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_inventory_variables_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'inventory_id' in params:
            path_params['inventory_id'] = params['inventory_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/inventory/{inventory_id}/variables/{variables_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_list(self, **kwargs):  # noqa: E501
        """project_list  # noqa: E501

        Return all projects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str status: Project sync status.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str status__not: Project sync status.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_list_with_http_info(self, **kwargs):  # noqa: E501
        """project_list  # noqa: E501

        Return all projects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str status: Project sync status.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str variables: List of variables to filter. Comma separeted \"key:value\" list.
        :param str status__not: Project sync status.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'status', 'id__not', 'name__not', 'variables', 'status__not', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'name__not' in params:
            query_params.append(('name__not', params['name__not']))  # noqa: E501
        if 'variables' in params:
            query_params.append(('variables', params['variables']))  # noqa: E501
        if 'status__not' in params:
            query_params.append(('status__not', params['status__not']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_module_get(self, id, module_id, **kwargs):  # noqa: E501
        """project_module_get  # noqa: E501

        Return a module details of project instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_module_get(id, module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str module_id: (required)
        :return: OneModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_module_get_with_http_info(id, module_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_module_get_with_http_info(id, module_id, **kwargs)  # noqa: E501
            return data

    def project_module_get_with_http_info(self, id, module_id, **kwargs):  # noqa: E501
        """project_module_get  # noqa: E501

        Return a module details of project instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_module_get_with_http_info(id, module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str module_id: (required)
        :return: OneModule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'module_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_module_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_module_get`")  # noqa: E501
        # verify the required parameter 'module_id' is set
        if ('module_id' not in params or
                params['module_id'] is None):
            raise ValueError("Missing the required parameter `module_id` when calling `project_module_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'module_id' in params:
            path_params['module_id'] = params['module_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/module/{module_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_module_list(self, id, **kwargs):  # noqa: E501
        """project_module_list  # noqa: E501

        Return all available modules of project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_module_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str path: Full path to module.
        :param str name: Name of module.
        :param str path__not: Full path to module.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_module_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_module_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def project_module_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """project_module_list  # noqa: E501

        Return all available modules of project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_module_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str path: Full path to module.
        :param str name: Name of module.
        :param str path__not: Full path to module.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'path', 'name', 'path__not', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_module_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_module_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'path__not' in params:
            query_params.append(('path__not', params['path__not']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/module/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_periodic_task_add(self, id, data, **kwargs):  # noqa: E501
        """project_periodic_task_add  # noqa: E501

        Create a new periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_add(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param OnePeriodictask data: (required)
        :return: OnePeriodictask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_periodic_task_add_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_periodic_task_add_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def project_periodic_task_add_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """project_periodic_task_add  # noqa: E501

        Create a new periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_add_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param OnePeriodictask data: (required)
        :return: OnePeriodictask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_periodic_task_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_periodic_task_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_periodic_task_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/periodic_task/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnePeriodictask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_periodic_task_edit(self, id, periodic_task_id, data, **kwargs):  # noqa: E501
        """project_periodic_task_edit  # noqa: E501

        Update one or more fields on an existing periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_edit(id, periodic_task_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param OnePeriodictask data: (required)
        :return: OnePeriodictask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_periodic_task_edit_with_http_info(id, periodic_task_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_periodic_task_edit_with_http_info(id, periodic_task_id, data, **kwargs)  # noqa: E501
            return data

    def project_periodic_task_edit_with_http_info(self, id, periodic_task_id, data, **kwargs):  # noqa: E501
        """project_periodic_task_edit  # noqa: E501

        Update one or more fields on an existing periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_edit_with_http_info(id, periodic_task_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param OnePeriodictask data: (required)
        :return: OnePeriodictask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'periodic_task_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_periodic_task_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_periodic_task_edit`")  # noqa: E501
        # verify the required parameter 'periodic_task_id' is set
        if ('periodic_task_id' not in params or
                params['periodic_task_id'] is None):
            raise ValueError("Missing the required parameter `periodic_task_id` when calling `project_periodic_task_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_periodic_task_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'periodic_task_id' in params:
            path_params['periodic_task_id'] = params['periodic_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/periodic_task/{periodic_task_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnePeriodictask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_periodic_task_execute(self, id, periodic_task_id, data, **kwargs):  # noqa: E501
        """project_periodic_task_execute  # noqa: E501

        Ad-hoc execute periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_execute(id, periodic_task_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param Empty data: (required)
        :return: ExecuteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_periodic_task_execute_with_http_info(id, periodic_task_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_periodic_task_execute_with_http_info(id, periodic_task_id, data, **kwargs)  # noqa: E501
            return data

    def project_periodic_task_execute_with_http_info(self, id, periodic_task_id, data, **kwargs):  # noqa: E501
        """project_periodic_task_execute  # noqa: E501

        Ad-hoc execute periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_execute_with_http_info(id, periodic_task_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param Empty data: (required)
        :return: ExecuteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'periodic_task_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_periodic_task_execute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_periodic_task_execute`")  # noqa: E501
        # verify the required parameter 'periodic_task_id' is set
        if ('periodic_task_id' not in params or
                params['periodic_task_id'] is None):
            raise ValueError("Missing the required parameter `periodic_task_id` when calling `project_periodic_task_execute`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_periodic_task_execute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'periodic_task_id' in params:
            path_params['periodic_task_id'] = params['periodic_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/periodic_task/{periodic_task_id}/execute/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExecuteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_periodic_task_get(self, id, periodic_task_id, **kwargs):  # noqa: E501
        """project_periodic_task_get  # noqa: E501

        Return a perodic task instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_get(id, periodic_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :return: OnePeriodictask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_periodic_task_get_with_http_info(id, periodic_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_periodic_task_get_with_http_info(id, periodic_task_id, **kwargs)  # noqa: E501
            return data

    def project_periodic_task_get_with_http_info(self, id, periodic_task_id, **kwargs):  # noqa: E501
        """project_periodic_task_get  # noqa: E501

        Return a perodic task instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_get_with_http_info(id, periodic_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :return: OnePeriodictask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'periodic_task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_periodic_task_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_periodic_task_get`")  # noqa: E501
        # verify the required parameter 'periodic_task_id' is set
        if ('periodic_task_id' not in params or
                params['periodic_task_id'] is None):
            raise ValueError("Missing the required parameter `periodic_task_id` when calling `project_periodic_task_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'periodic_task_id' in params:
            path_params['periodic_task_id'] = params['periodic_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/periodic_task/{periodic_task_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnePeriodictask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_periodic_task_list(self, id, **kwargs):  # noqa: E501
        """project_periodic_task_list  # noqa: E501

        Return all periodic tasks in project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str mode: Periodic task module or playbook name.
        :param str kind: Kind of periodic task.
        :param str type: Instance type.
        :param float template: A unique integer id of template used in periodic task.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_periodic_task_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_periodic_task_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def project_periodic_task_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """project_periodic_task_list  # noqa: E501

        Return all periodic tasks in project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str mode: Periodic task module or playbook name.
        :param str kind: Kind of periodic task.
        :param str type: Instance type.
        :param float template: A unique integer id of template used in periodic task.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'mode', 'kind', 'type', 'template', 'id__not', 'name__not', 'name', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_periodic_task_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_periodic_task_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'kind' in params:
            query_params.append(('kind', params['kind']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'template' in params:
            query_params.append(('template', params['template']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'name__not' in params:
            query_params.append(('name__not', params['name__not']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/periodic_task/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_periodic_task_remove(self, id, periodic_task_id, **kwargs):  # noqa: E501
        """project_periodic_task_remove  # noqa: E501

        Remove an existing periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_remove(id, periodic_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_periodic_task_remove_with_http_info(id, periodic_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_periodic_task_remove_with_http_info(id, periodic_task_id, **kwargs)  # noqa: E501
            return data

    def project_periodic_task_remove_with_http_info(self, id, periodic_task_id, **kwargs):  # noqa: E501
        """project_periodic_task_remove  # noqa: E501

        Remove an existing periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_remove_with_http_info(id, periodic_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'periodic_task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_periodic_task_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_periodic_task_remove`")  # noqa: E501
        # verify the required parameter 'periodic_task_id' is set
        if ('periodic_task_id' not in params or
                params['periodic_task_id'] is None):
            raise ValueError("Missing the required parameter `periodic_task_id` when calling `project_periodic_task_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'periodic_task_id' in params:
            path_params['periodic_task_id'] = params['periodic_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/periodic_task/{periodic_task_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_periodic_task_update(self, id, periodic_task_id, data, **kwargs):  # noqa: E501
        """project_periodic_task_update  # noqa: E501

        Update a periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_update(id, periodic_task_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param OnePeriodictask data: (required)
        :return: OnePeriodictask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_periodic_task_update_with_http_info(id, periodic_task_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_periodic_task_update_with_http_info(id, periodic_task_id, data, **kwargs)  # noqa: E501
            return data

    def project_periodic_task_update_with_http_info(self, id, periodic_task_id, data, **kwargs):  # noqa: E501
        """project_periodic_task_update  # noqa: E501

        Update a periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_update_with_http_info(id, periodic_task_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param OnePeriodictask data: (required)
        :return: OnePeriodictask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'periodic_task_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_periodic_task_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_periodic_task_update`")  # noqa: E501
        # verify the required parameter 'periodic_task_id' is set
        if ('periodic_task_id' not in params or
                params['periodic_task_id'] is None):
            raise ValueError("Missing the required parameter `periodic_task_id` when calling `project_periodic_task_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_periodic_task_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'periodic_task_id' in params:
            path_params['periodic_task_id'] = params['periodic_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/periodic_task/{periodic_task_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnePeriodictask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_periodic_task_variables_add(self, id, periodic_task_id, data, **kwargs):  # noqa: E501
        """project_periodic_task_variables_add  # noqa: E501

        Create a new variable of periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_variables_add(id, periodic_task_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param PeriodicTaskVariable data: (required)
        :return: PeriodicTaskVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_periodic_task_variables_add_with_http_info(id, periodic_task_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_periodic_task_variables_add_with_http_info(id, periodic_task_id, data, **kwargs)  # noqa: E501
            return data

    def project_periodic_task_variables_add_with_http_info(self, id, periodic_task_id, data, **kwargs):  # noqa: E501
        """project_periodic_task_variables_add  # noqa: E501

        Create a new variable of periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_variables_add_with_http_info(id, periodic_task_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param PeriodicTaskVariable data: (required)
        :return: PeriodicTaskVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'periodic_task_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_periodic_task_variables_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_periodic_task_variables_add`")  # noqa: E501
        # verify the required parameter 'periodic_task_id' is set
        if ('periodic_task_id' not in params or
                params['periodic_task_id'] is None):
            raise ValueError("Missing the required parameter `periodic_task_id` when calling `project_periodic_task_variables_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_periodic_task_variables_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'periodic_task_id' in params:
            path_params['periodic_task_id'] = params['periodic_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/periodic_task/{periodic_task_id}/variables/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeriodicTaskVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_periodic_task_variables_edit(self, id, periodic_task_id, variables_id, data, **kwargs):  # noqa: E501
        """project_periodic_task_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_variables_edit(id, periodic_task_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param PeriodicTaskVariable data: (required)
        :return: PeriodicTaskVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_periodic_task_variables_edit_with_http_info(id, periodic_task_id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_periodic_task_variables_edit_with_http_info(id, periodic_task_id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def project_periodic_task_variables_edit_with_http_info(self, id, periodic_task_id, variables_id, data, **kwargs):  # noqa: E501
        """project_periodic_task_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_variables_edit_with_http_info(id, periodic_task_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param PeriodicTaskVariable data: (required)
        :return: PeriodicTaskVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'periodic_task_id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_periodic_task_variables_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_periodic_task_variables_edit`")  # noqa: E501
        # verify the required parameter 'periodic_task_id' is set
        if ('periodic_task_id' not in params or
                params['periodic_task_id'] is None):
            raise ValueError("Missing the required parameter `periodic_task_id` when calling `project_periodic_task_variables_edit`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_periodic_task_variables_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_periodic_task_variables_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'periodic_task_id' in params:
            path_params['periodic_task_id'] = params['periodic_task_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/periodic_task/{periodic_task_id}/variables/{variables_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeriodicTaskVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_periodic_task_variables_get(self, id, periodic_task_id, variables_id, **kwargs):  # noqa: E501
        """project_periodic_task_variables_get  # noqa: E501

        Return a variable of periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_variables_get(id, periodic_task_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: PeriodicTaskVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_periodic_task_variables_get_with_http_info(id, periodic_task_id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_periodic_task_variables_get_with_http_info(id, periodic_task_id, variables_id, **kwargs)  # noqa: E501
            return data

    def project_periodic_task_variables_get_with_http_info(self, id, periodic_task_id, variables_id, **kwargs):  # noqa: E501
        """project_periodic_task_variables_get  # noqa: E501

        Return a variable of periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_variables_get_with_http_info(id, periodic_task_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: PeriodicTaskVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'periodic_task_id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_periodic_task_variables_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_periodic_task_variables_get`")  # noqa: E501
        # verify the required parameter 'periodic_task_id' is set
        if ('periodic_task_id' not in params or
                params['periodic_task_id'] is None):
            raise ValueError("Missing the required parameter `periodic_task_id` when calling `project_periodic_task_variables_get`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_periodic_task_variables_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'periodic_task_id' in params:
            path_params['periodic_task_id'] = params['periodic_task_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/periodic_task/{periodic_task_id}/variables/{variables_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeriodicTaskVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_periodic_task_variables_list(self, id, periodic_task_id, **kwargs):  # noqa: E501
        """project_periodic_task_variables_list  # noqa: E501

        Return all variables of periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_variables_list(id, periodic_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_periodic_task_variables_list_with_http_info(id, periodic_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_periodic_task_variables_list_with_http_info(id, periodic_task_id, **kwargs)  # noqa: E501
            return data

    def project_periodic_task_variables_list_with_http_info(self, id, periodic_task_id, **kwargs):  # noqa: E501
        """project_periodic_task_variables_list  # noqa: E501

        Return all variables of periodic task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_variables_list_with_http_info(id, periodic_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'periodic_task_id', 'id2', 'key', 'value', 'id__not', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_periodic_task_variables_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_periodic_task_variables_list`")  # noqa: E501
        # verify the required parameter 'periodic_task_id' is set
        if ('periodic_task_id' not in params or
                params['periodic_task_id'] is None):
            raise ValueError("Missing the required parameter `periodic_task_id` when calling `project_periodic_task_variables_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'periodic_task_id' in params:
            path_params['periodic_task_id'] = params['periodic_task_id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/periodic_task/{periodic_task_id}/variables/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_periodic_task_variables_remove(self, id, periodic_task_id, variables_id, **kwargs):  # noqa: E501
        """project_periodic_task_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_variables_remove(id, periodic_task_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_periodic_task_variables_remove_with_http_info(id, periodic_task_id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_periodic_task_variables_remove_with_http_info(id, periodic_task_id, variables_id, **kwargs)  # noqa: E501
            return data

    def project_periodic_task_variables_remove_with_http_info(self, id, periodic_task_id, variables_id, **kwargs):  # noqa: E501
        """project_periodic_task_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_variables_remove_with_http_info(id, periodic_task_id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'periodic_task_id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_periodic_task_variables_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_periodic_task_variables_remove`")  # noqa: E501
        # verify the required parameter 'periodic_task_id' is set
        if ('periodic_task_id' not in params or
                params['periodic_task_id'] is None):
            raise ValueError("Missing the required parameter `periodic_task_id` when calling `project_periodic_task_variables_remove`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_periodic_task_variables_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'periodic_task_id' in params:
            path_params['periodic_task_id'] = params['periodic_task_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/periodic_task/{periodic_task_id}/variables/{variables_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_periodic_task_variables_update(self, id, periodic_task_id, variables_id, data, **kwargs):  # noqa: E501
        """project_periodic_task_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_variables_update(id, periodic_task_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param PeriodicTaskVariable data: (required)
        :return: PeriodicTaskVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_periodic_task_variables_update_with_http_info(id, periodic_task_id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_periodic_task_variables_update_with_http_info(id, periodic_task_id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def project_periodic_task_variables_update_with_http_info(self, id, periodic_task_id, variables_id, data, **kwargs):  # noqa: E501
        """project_periodic_task_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_periodic_task_variables_update_with_http_info(id, periodic_task_id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int periodic_task_id: A unique integer value identifying instance of this periodic_task sublist. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param PeriodicTaskVariable data: (required)
        :return: PeriodicTaskVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'periodic_task_id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_periodic_task_variables_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_periodic_task_variables_update`")  # noqa: E501
        # verify the required parameter 'periodic_task_id' is set
        if ('periodic_task_id' not in params or
                params['periodic_task_id'] is None):
            raise ValueError("Missing the required parameter `periodic_task_id` when calling `project_periodic_task_variables_update`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_periodic_task_variables_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_periodic_task_variables_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'periodic_task_id' in params:
            path_params['periodic_task_id'] = params['periodic_task_id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/periodic_task/{periodic_task_id}/variables/{variables_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeriodicTaskVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_playbook_get(self, id, playbook_id, **kwargs):  # noqa: E501
        """project_playbook_get  # noqa: E501

        Return a playbook of project instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_playbook_get(id, playbook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int playbook_id: A unique integer value identifying instance of this playbook sublist. (required)
        :return: OnePlaybook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_playbook_get_with_http_info(id, playbook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_playbook_get_with_http_info(id, playbook_id, **kwargs)  # noqa: E501
            return data

    def project_playbook_get_with_http_info(self, id, playbook_id, **kwargs):  # noqa: E501
        """project_playbook_get  # noqa: E501

        Return a playbook of project instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_playbook_get_with_http_info(id, playbook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int playbook_id: A unique integer value identifying instance of this playbook sublist. (required)
        :return: OnePlaybook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'playbook_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_playbook_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_playbook_get`")  # noqa: E501
        # verify the required parameter 'playbook_id' is set
        if ('playbook_id' not in params or
                params['playbook_id'] is None):
            raise ValueError("Missing the required parameter `playbook_id` when calling `project_playbook_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'playbook_id' in params:
            path_params['playbook_id'] = params['playbook_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/playbook/{playbook_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnePlaybook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_playbook_list(self, id, **kwargs):  # noqa: E501
        """project_playbook_list  # noqa: E501

        Return all playbooks of project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_playbook_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str playbook: Playbook filename.
        :param str pb_filter: Playbook filename - filter for prefetch.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str playbook__not: Playbook filename.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_playbook_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_playbook_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def project_playbook_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """project_playbook_list  # noqa: E501

        Return all playbooks of project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_playbook_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str playbook: Playbook filename.
        :param str pb_filter: Playbook filename - filter for prefetch.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str playbook__not: Playbook filename.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'name', 'playbook', 'pb_filter', 'id__not', 'name__not', 'playbook__not', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_playbook_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_playbook_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'playbook' in params:
            query_params.append(('playbook', params['playbook']))  # noqa: E501
        if 'pb_filter' in params:
            query_params.append(('pb_filter', params['pb_filter']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'name__not' in params:
            query_params.append(('name__not', params['name__not']))  # noqa: E501
        if 'playbook__not' in params:
            query_params.append(('playbook__not', params['playbook__not']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/playbook/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_remove(self, id, **kwargs):  # noqa: E501
        """project_remove  # noqa: E501

        Remove an existing project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_remove(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_remove_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_remove_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def project_remove_with_http_info(self, id, **kwargs):  # noqa: E501
        """project_remove  # noqa: E501

        Remove an existing project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_remove_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_set_owner(self, id, data, **kwargs):  # noqa: E501
        """project_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_set_owner(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_set_owner_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_set_owner_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def project_set_owner_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """project_set_owner  # noqa: E501

        Change instance owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_set_owner_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param SetOwner data: (required)
        :return: SetOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_set_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_set_owner`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_set_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/set_owner/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetOwner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_sync(self, id, data, **kwargs):  # noqa: E501
        """project_sync  # noqa: E501

        Sync project with repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_sync(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param Empty data: (required)
        :return: ActionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_sync_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_sync_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def project_sync_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """project_sync  # noqa: E501

        Sync project with repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_sync_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param Empty data: (required)
        :return: ActionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_sync" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_sync`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_sync`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/sync/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_template_add(self, id, data, **kwargs):  # noqa: E501
        """project_template_add  # noqa: E501

        Create a new execute template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_add(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param OneTemplate data: (required)
        :return: OneTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_template_add_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_template_add_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def project_template_add_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """project_template_add  # noqa: E501

        Create a new execute template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_add_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param OneTemplate data: (required)
        :return: OneTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_template_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_template_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_template_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/template/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_template_edit(self, id, template_id, data, **kwargs):  # noqa: E501
        """project_template_edit  # noqa: E501

        Update one or more fields on an existing execute template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_edit(id, template_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int template_id: A unique integer value identifying instance of this template sublist. (required)
        :param OneTemplate data: (required)
        :return: OneTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_template_edit_with_http_info(id, template_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_template_edit_with_http_info(id, template_id, data, **kwargs)  # noqa: E501
            return data

    def project_template_edit_with_http_info(self, id, template_id, data, **kwargs):  # noqa: E501
        """project_template_edit  # noqa: E501

        Update one or more fields on an existing execute template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_edit_with_http_info(id, template_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int template_id: A unique integer value identifying instance of this template sublist. (required)
        :param OneTemplate data: (required)
        :return: OneTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'template_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_template_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_template_edit`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `project_template_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_template_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/template/{template_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_template_execute(self, id, template_id, data, **kwargs):  # noqa: E501
        """project_template_execute  # noqa: E501

        Execute template with option.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_execute(id, template_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int template_id: A unique integer value identifying instance of this template sublist. (required)
        :param TemplateExec data: (required)
        :return: ExecuteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_template_execute_with_http_info(id, template_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_template_execute_with_http_info(id, template_id, data, **kwargs)  # noqa: E501
            return data

    def project_template_execute_with_http_info(self, id, template_id, data, **kwargs):  # noqa: E501
        """project_template_execute  # noqa: E501

        Execute template with option.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_execute_with_http_info(id, template_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int template_id: A unique integer value identifying instance of this template sublist. (required)
        :param TemplateExec data: (required)
        :return: ExecuteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'template_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_template_execute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_template_execute`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `project_template_execute`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_template_execute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/template/{template_id}/execute/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExecuteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_template_get(self, id, template_id, **kwargs):  # noqa: E501
        """project_template_get  # noqa: E501

        Return a execute template instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_get(id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int template_id: A unique integer value identifying instance of this template sublist. (required)
        :return: OneTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_template_get_with_http_info(id, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_template_get_with_http_info(id, template_id, **kwargs)  # noqa: E501
            return data

    def project_template_get_with_http_info(self, id, template_id, **kwargs):  # noqa: E501
        """project_template_get  # noqa: E501

        Return a execute template instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_get_with_http_info(id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int template_id: A unique integer value identifying instance of this template sublist. (required)
        :return: OneTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_template_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_template_get`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `project_template_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/template/{template_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_template_list(self, id, **kwargs):  # noqa: E501
        """project_template_list  # noqa: E501

        Return all execute templates in project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str kind: A kind of template.
        :param str inventory: The inventory id or path in project.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_template_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_template_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def project_template_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """project_template_list  # noqa: E501

        Return all execute templates in project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str name: A name string value (or comma separated list) of instance.
        :param str kind: A kind of template.
        :param str inventory: The inventory id or path in project.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str name__not: A name string value (or comma separated list) of instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'name', 'kind', 'inventory', 'id__not', 'name__not', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_template_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_template_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'kind' in params:
            query_params.append(('kind', params['kind']))  # noqa: E501
        if 'inventory' in params:
            query_params.append(('inventory', params['inventory']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'name__not' in params:
            query_params.append(('name__not', params['name__not']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/template/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_template_remove(self, id, template_id, **kwargs):  # noqa: E501
        """project_template_remove  # noqa: E501

        Remove an existing execute template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_remove(id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int template_id: A unique integer value identifying instance of this template sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_template_remove_with_http_info(id, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_template_remove_with_http_info(id, template_id, **kwargs)  # noqa: E501
            return data

    def project_template_remove_with_http_info(self, id, template_id, **kwargs):  # noqa: E501
        """project_template_remove  # noqa: E501

        Remove an existing execute template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_remove_with_http_info(id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int template_id: A unique integer value identifying instance of this template sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_template_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_template_remove`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `project_template_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/template/{template_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_template_update(self, id, template_id, data, **kwargs):  # noqa: E501
        """project_template_update  # noqa: E501

        Update a execute template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_update(id, template_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int template_id: A unique integer value identifying instance of this template sublist. (required)
        :param OneTemplate data: (required)
        :return: OneTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_template_update_with_http_info(id, template_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_template_update_with_http_info(id, template_id, data, **kwargs)  # noqa: E501
            return data

    def project_template_update_with_http_info(self, id, template_id, data, **kwargs):  # noqa: E501
        """project_template_update  # noqa: E501

        Update a execute template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_template_update_with_http_info(id, template_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int template_id: A unique integer value identifying instance of this template sublist. (required)
        :param OneTemplate data: (required)
        :return: OneTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'template_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_template_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_template_update`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `project_template_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_template_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/template/{template_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_update(self, id, data, **kwargs):  # noqa: E501
        """project_update  # noqa: E501

        Update a project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param OneProject data: (required)
        :return: OneProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def project_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """project_update  # noqa: E501

        Update a project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param OneProject data: (required)
        :return: OneProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_variables_add(self, id, data, **kwargs):  # noqa: E501
        """project_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_variables_add(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param ProjectVariable data: (required)
        :return: ProjectVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_variables_add_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_variables_add_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def project_variables_add_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """project_variables_add  # noqa: E501

        Create a new variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_variables_add_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param ProjectVariable data: (required)
        :return: ProjectVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_variables_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_variables_add`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_variables_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/variables/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_variables_edit(self, id, variables_id, data, **kwargs):  # noqa: E501
        """project_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_variables_edit(id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param ProjectVariable data: (required)
        :return: ProjectVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_variables_edit_with_http_info(id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_variables_edit_with_http_info(id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def project_variables_edit_with_http_info(self, id, variables_id, data, **kwargs):  # noqa: E501
        """project_variables_edit  # noqa: E501

        Update one or more fields on an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_variables_edit_with_http_info(id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param ProjectVariable data: (required)
        :return: ProjectVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_variables_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_variables_edit`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_variables_edit`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_variables_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/variables/{variables_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_variables_get(self, id, variables_id, **kwargs):  # noqa: E501
        """project_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_variables_get(id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: ProjectVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_variables_get_with_http_info(id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_variables_get_with_http_info(id, variables_id, **kwargs)  # noqa: E501
            return data

    def project_variables_get_with_http_info(self, id, variables_id, **kwargs):  # noqa: E501
        """project_variables_get  # noqa: E501

        Return a variable of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_variables_get_with_http_info(id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: ProjectVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_variables_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_variables_get`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_variables_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/variables/{variables_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_variables_list(self, id, **kwargs):  # noqa: E501
        """project_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_variables_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_variables_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_variables_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def project_variables_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """project_variables_list  # noqa: E501

        Return all variables of instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_variables_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param str id2: A unique integer value (or comma separated list) identifying this instance.
        :param str key: A key name string value (or comma separated list) of instance.
        :param str value: A value of instance.
        :param str id__not: A unique integer value (or comma separated list) identifying this instance.
        :param str ordering: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'key', 'value', 'id__not', 'ordering', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_variables_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_variables_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'id__not' in params:
            query_params.append(('id__not', params['id__not']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/variables/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_variables_remove(self, id, variables_id, **kwargs):  # noqa: E501
        """project_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_variables_remove(id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_variables_remove_with_http_info(id, variables_id, **kwargs)  # noqa: E501
        else:
            (data) = self.project_variables_remove_with_http_info(id, variables_id, **kwargs)  # noqa: E501
            return data

    def project_variables_remove_with_http_info(self, id, variables_id, **kwargs):  # noqa: E501
        """project_variables_remove  # noqa: E501

        Remove an existing variable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_variables_remove_with_http_info(id, variables_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'variables_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_variables_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_variables_remove`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_variables_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/variables/{variables_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_variables_update(self, id, variables_id, data, **kwargs):  # noqa: E501
        """project_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_variables_update(id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param ProjectVariable data: (required)
        :return: ProjectVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_variables_update_with_http_info(id, variables_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.project_variables_update_with_http_info(id, variables_id, data, **kwargs)  # noqa: E501
            return data

    def project_variables_update_with_http_info(self, id, variables_id, data, **kwargs):  # noqa: E501
        """project_variables_update  # noqa: E501

        Update variable value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_variables_update_with_http_info(id, variables_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this project. (required)
        :param int variables_id: A unique integer value identifying instance of this variables sublist. (required)
        :param ProjectVariable data: (required)
        :return: ProjectVariable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'variables_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_variables_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `project_variables_update`")  # noqa: E501
        # verify the required parameter 'variables_id' is set
        if ('variables_id' not in params or
                params['variables_id'] is None):
            raise ValueError("Missing the required parameter `variables_id` when calling `project_variables_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `project_variables_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'variables_id' in params:
            path_params['variables_id'] = params['variables_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'multipart/form-data; boundary=BoUnDaRyStRiNg'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{id}/variables/{variables_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectVariable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
